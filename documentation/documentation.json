{
    "pipes": [],
    "interfaces": [
        {
            "name": "Array",
            "id": "interface-Array-6a502edd2aaa8ed2008dd142c9aa9c07301e8d38073031f83195d529f7e97a3aaa0eee0fd2160380a50cdd7f619caae9c7029a0d5d6f05487b19e81cb32b05ce",
            "file": "src/boilerplate.polyfill.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import 'source-map-support/register';\n\nimport { compact, map } from 'lodash';\nimport { Brackets, QueryBuilder, SelectQueryBuilder } from 'typeorm';\n\nimport type { AbstractEntity } from './common/abstract.entity';\nimport type { AbstractDto } from './common/dto/abstract.dto';\nimport { PageDto } from './common/dto/page.dto';\nimport { PageMetaDto } from './common/dto/page-meta.dto';\nimport type { PageOptionsDto } from './common/dto/page-options.dto';\nimport { VIRTUAL_COLUMN_KEY } from './decorators/virtual-column.decorator';\n\ndeclare global {\n  interface Array<T> {\n    toDtos<Dto extends AbstractDto>(this: T[], options?: any): Dto[];\n\n    toPageDto<Dto extends AbstractDto>(\n      this: T[],\n      pageMetaDto: PageMetaDto,\n      // FIXME make option type visible from entity\n      options?: any,\n    ): PageDto<Dto>;\n  }\n}\n\ndeclare module 'typeorm' {\n  interface QueryBuilder<Entity> {\n    searchByString(q: string, columnNames: string[]): this;\n  }\n\n  interface SelectQueryBuilder<Entity> {\n    paginate(\n      this: SelectQueryBuilder<Entity>,\n      pageOptionsDto: PageOptionsDto,\n      options?: Partial<{ takeAll: boolean }>,\n    ): Promise<[Entity[], PageMetaDto]>;\n  }\n}\n\nArray.prototype.toDtos = function <\n  Entity extends AbstractEntity<Dto>,\n  Dto extends AbstractDto,\n>(options?: any): Dto[] {\n  return compact(\n    map<Entity, Dto>(this, (item) => item.toDto(options as never)),\n  );\n};\n\nArray.prototype.toPageDto = function (pageMetaDto: PageMetaDto, options?: any) {\n  return new PageDto(this.toDtos(options), pageMetaDto);\n};\n\nQueryBuilder.prototype.searchByString = function (q, columnNames) {\n  if (!q) {\n    return this;\n  }\n\n  this.andWhere(\n    new Brackets((qb) => {\n      for (const item of columnNames) {\n        qb.orWhere(`${item} ILIKE :q`);\n      }\n    }),\n  );\n\n  this.setParameter('q', `%${q}%`);\n\n  return this;\n};\n\nSelectQueryBuilder.prototype.paginate = async function (\n  pageOptionsDto: PageOptionsDto,\n  options?: Partial<{ takeAll: boolean }>,\n) {\n  if (options?.takeAll) {\n    this.skip(pageOptionsDto.skip).take(pageOptionsDto.take);\n  }\n\n  const itemCount = await this.getCount();\n\n  const { entities, raw } = await this.getRawAndEntities();\n\n  const items = entities.map((entity, index) => {\n    const metaInfo = Reflect.getMetadata(VIRTUAL_COLUMN_KEY, entity) ?? {};\n    const item = raw[index];\n\n    for (const [propertyKey, name] of Object.entries<string>(metaInfo)) {\n      entity[propertyKey] = item[name];\n    }\n\n    return entity;\n  });\n\n  const pageMetaDto = new PageMetaDto({\n    itemCount,\n    pageOptionsDto,\n  });\n\n  return [items, pageMetaDto];\n};\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "toDtos",
                    "args": [
                        {
                            "name": "this",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Dto[]",
                    "typeParameters": [
                        "Dto"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toPageDto",
                    "args": [
                        {
                            "name": "this",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageMetaDto",
                            "type": "PageMetaDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "PageDto<Dto>",
                    "typeParameters": [
                        "Dto"
                    ],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageMetaDto",
                            "type": "PageMetaDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IAbstractEntity",
            "id": "interface-IAbstractEntity-43fc5094dedba2fe72603430829f1bd87af60b95a67bf87f9cb787bc551bc02fb29ed12bd9cf6b5fe468a731fa74f4cf4835693acf143ddc41d9162093be1d7d",
            "file": "src/common/abstract.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CreateDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport type { Constructor } from '../types';\nimport type { AbstractDto } from './dto/abstract.dto';\n\n/**\n * Abstract Entity\n * @author Narek Hakobyan <narek.hakobyan.07@gmail.com>\n *\n * @description This class is an abstract class for all entities.\n * It's experimental and recommended using it only in microservice architecture,\n * otherwise just delete and use your own entity.\n */\nexport interface IAbstractEntity<DTO extends AbstractDto, O = never> {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n\n  toDto(options?: O): DTO;\n}\n\nexport abstract class AbstractEntity<\n  DTO extends AbstractDto = AbstractDto,\n  O = never,\n> implements IAbstractEntity<DTO, O>\n{\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n  })\n  createdAt: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n  })\n  updatedAt: Date;\n\n  private dtoClass: Constructor<DTO, [AbstractEntity, O?]>;\n\n  toDto(options?: O): DTO {\n    const dtoClass = this.dtoClass;\n\n    if (!dtoClass) {\n      throw new Error(\n        `You need to use @UseDto on class (${this.constructor.name}) be able to call toDto function`,\n      );\n    }\n\n    return new this.dtoClass(this, options);\n  }\n}\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 167,
            "description": "<p>Abstract Entity</p>\n<p>It&#39;s experimental and recommended using it only in microservice architecture,\notherwise just delete and use your own entity.</p>\n",
            "rawdescription": "\n\nAbstract Entity\n\nIt's experimental and recommended using it only in microservice architecture,\notherwise just delete and use your own entity.\n",
            "methods": [
                {
                    "name": "toDto",
                    "args": [
                        {
                            "name": "options",
                            "type": "O",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DTO",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "O",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IApiFile",
            "id": "interface-IApiFile-560157de42b453107210110b2bf9b89cdc4e5129bb6eca7361e3090399111a1d27aa8df852b66f9714dd28123f6e3656e75b9dc5751034f178ca4b20eb792f1e",
            "file": "src/interfaces/IApiFile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IApiFile {\n  name: string;\n  isArray?: boolean;\n}\n",
            "properties": [
                {
                    "name": "isArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IExistsValidationArguments",
            "id": "interface-IExistsValidationArguments-be624efd6f864998f93c3cf33cfed1acc1167f14c944f7b3b6a1a3e438beeb0b84ad654c367bb7e520e3503d7c885a51c5542a3f8957f1458f83b8b6ada1b4f5",
            "file": "src/validators/exists.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/typeorm';\nimport type {\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { registerDecorator, ValidatorConstraint } from 'class-validator';\nimport type { EntitySchema, FindConditions, ObjectType } from 'typeorm';\nimport { Connection } from 'typeorm';\n\n@Injectable()\n@ValidatorConstraint({ name: 'exists', async: true })\nexport class ExistsValidator implements ValidatorConstraintInterface {\n  constructor(@InjectConnection() private readonly connection: Connection) {}\n\n  public async validate<E>(\n    value: string,\n    args: IExistsValidationArguments<E>,\n  ): Promise<boolean> {\n    const [entityClass, findCondition = args.property] = args.constraints;\n\n    return (\n      (await this.connection.getRepository(entityClass).count({\n        where:\n          typeof findCondition === 'function'\n            ? findCondition(args)\n            : {\n                [findCondition || args.property]: value,\n              },\n      })) > 0\n    );\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [entityClass] = args.constraints;\n    const entity = entityClass.name || 'Entity';\n\n    return `The selected ${args.property}  does not exist in ${entity} entity`;\n  }\n}\n\ntype ExistsValidationConstraints<E> = [\n  ObjectType<E> | EntitySchema<E> | string,\n  ((validationArguments: ValidationArguments) => FindConditions<E>) | keyof E,\n];\ninterface IExistsValidationArguments<E> extends ValidationArguments {\n  constraints: ExistsValidationConstraints<E>;\n}\n\nexport function Exists<E>(\n  constraints: Partial<ExistsValidationConstraints<E>>,\n  validationOptions?: ValidationOptions,\n): PropertyDecorator {\n  return (object, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints,\n      validator: ExistsValidator,\n    });\n  };\n}\n",
            "properties": [
                {
                    "name": "constraints",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExistsValidationConstraints<E>",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ValidationArguments"
        },
        {
            "name": "IFile",
            "id": "interface-IFile-16a130c13e1c37aae6b17e7222c61ab6f73f38b89286866046185220c22fba7078ad38aad5099ec4dedadb6c2768b9c3d73c261ea547dbf2b070f29794bc8715",
            "file": "src/interfaces/IFile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFile {\n  encoding: string;\n  buffer: Buffer;\n  fieldname: string;\n  mimetype: string;\n  originalname: string;\n  size: number;\n}\n",
            "properties": [
                {
                    "name": "buffer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Buffer",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "encoding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "fieldname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "mimetype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "originalname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "INumberFieldOptions",
            "id": "interface-INumberFieldOptions-b3d0185a23f92251448074230e1515268245f952a66c11a11766005db3181fe22e9a825a5b256dd77644ca04359054035e912a16eed788ce74bc86019e622d19",
            "file": "src/decorators/field.decorators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { applyDecorators } from '@nestjs/common';\nimport type { ApiPropertyOptions } from '@nestjs/swagger';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMaxSize,\n  ArrayMinSize,\n  ArrayNotEmpty,\n  IsBoolean,\n  IsDate,\n  IsEmail,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n  IsUUID,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport _ from 'lodash';\n\nimport { supportedLanguageCount } from '../constants';\nimport { ApiEnumProperty, ApiUUIDProperty } from './property.decorators';\nimport {\n  PhoneNumberSerializer,\n  ToArray,\n  ToBoolean,\n  ToLowerCase,\n  ToUpperCase,\n  Trim,\n} from './transform.decorators';\nimport { IsPassword, IsPhoneNumber, IsTmpKey } from './validator.decorators';\n\ntype RequireField<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\ninterface IStringFieldOptions {\n  minLength?: number;\n  maxLength?: number;\n  toLowerCase?: boolean;\n  toUpperCase?: boolean;\n  swagger?: boolean;\n}\n\ninterface INumberFieldOptions {\n  each?: boolean;\n  minimum?: number;\n  maximum?: number;\n  int?: boolean;\n  isPositive?: boolean;\n  swagger?: boolean;\n}\n\nexport function NumberField(\n  options: Omit<ApiPropertyOptions, 'type'> & INumberFieldOptions = {},\n): PropertyDecorator {\n  const decorators = [Type(() => Number)];\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { each, int, minimum, maximum, isPositive, swagger } = options;\n\n  if (swagger !== false) {\n    decorators.push(\n      ApiProperty({ type: Number, ...options, example: int ? 1 : 1.2 }),\n    );\n  }\n\n  if (each) {\n    decorators.push(ToArray());\n  }\n\n  if (int) {\n    decorators.push(IsInt({ each }));\n  } else {\n    decorators.push(IsNumber({}, { each }));\n  }\n\n  if (_.isNumber(minimum)) {\n    decorators.push(Min(minimum, { each }));\n  }\n\n  if (_.isNumber(maximum)) {\n    decorators.push(Max(maximum, { each }));\n  }\n\n  if (isPositive) {\n    decorators.push(IsPositive({ each }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function NumberFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{\n      each: boolean;\n      int: boolean;\n      isPositive: boolean;\n    }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    NumberField({ required: false, ...options }),\n  );\n}\n\nexport function StringField(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  const decorators = [IsNotEmpty(), IsString(), Trim()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: String, ...options }));\n  }\n\n  if (options?.minLength) {\n    decorators.push(MinLength(options.minLength));\n  }\n\n  if (options?.maxLength) {\n    decorators.push(MaxLength(options.maxLength));\n  }\n\n  if (options?.toLowerCase) {\n    decorators.push(ToLowerCase());\n  }\n\n  if (options?.toUpperCase) {\n    decorators.push(ToUpperCase());\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function StringFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    StringField({ required: false, ...options }),\n  );\n}\n\nexport function PasswordField(\n  options: Omit<ApiPropertyOptions, 'type' | 'minLength'> &\n    IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    StringField({ format: '^[\\\\d!#$%&*@A-Z^a-z]*$', ...options }),\n    IsPassword(),\n  );\n}\n\nexport function PasswordFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required' | 'minLength'> &\n    IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    PasswordField({ required: false, ...options }),\n  );\n}\n\nexport function BooleanField(\n  options: Omit<ApiPropertyOptions, 'type'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  const decorators = [IsBoolean(), ToBoolean()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: Boolean, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function BooleanFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    BooleanField({ required: false, ...options }),\n  );\n}\n\nexport function TranslationsField(\n  options: RequireField<Omit<ApiPropertyOptions, 'isArray'>, 'type'> &\n    Partial<{ swagger: boolean }>,\n): PropertyDecorator {\n  const decorators = [\n    ArrayMinSize(supportedLanguageCount),\n    ArrayMaxSize(supportedLanguageCount),\n    ValidateNested({\n      each: true,\n    }),\n    Type(() => options.type as FunctionConstructor),\n  ];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ isArray: true, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function TranslationsFieldOptional(\n  options: RequireField<Omit<ApiPropertyOptions, 'isArray'>, 'type'> &\n    Partial<{ swagger: boolean }>,\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    TranslationsField({ required: false, ...options }),\n  );\n}\n\nexport function TmpKeyField(\n  options: Omit<ApiPropertyOptions, 'type'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  const decorators = [IsTmpKey()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: String, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function TmpKeyFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    TmpKeyField({ required: false, ...options }),\n  );\n}\n\nexport function EnumField<TEnum>(\n  getEnum: () => TEnum,\n  options: Omit<ApiPropertyOptions, 'type' | 'enum' | 'enumName'> &\n    Partial<{\n      each: boolean;\n      swagger: boolean;\n    }> = {},\n): PropertyDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const enumValue = getEnum() as any;\n  const decorators = [IsEnum(enumValue, { each: options.each })];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiEnumProperty(getEnum, options));\n  }\n\n  if (options.each) {\n    decorators.push(ToArray());\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function EnumFieldOptional<TEnum>(\n  getEnum: () => TEnum,\n  options: Omit<ApiPropertyOptions, 'type' | 'required' | 'enum' | 'enumName'> &\n    Partial<{ each: boolean; swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    EnumField(getEnum, { required: false, ...options }),\n  );\n}\n\nexport function EmailField(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  const decorators = [\n    IsEmail(),\n    StringField({ toLowerCase: true, ...options }),\n  ];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: String, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function EmailFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    EmailField({ required: false, ...options }),\n  );\n}\n\nexport function PhoneField(\n  options: Omit<ApiPropertyOptions, 'type'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  const decorators = [IsPhoneNumber(), PhoneNumberSerializer()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: String, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function PhoneFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    PhoneField({ required: false, ...options }),\n  );\n}\n\nexport function UUIDField(\n  options: Omit<ApiPropertyOptions, 'type' | 'format'> &\n    Partial<{ each: boolean; swagger: boolean }> = {},\n): PropertyDecorator {\n  const decorators = [IsUUID('4', { each: options?.each })];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiUUIDProperty(options));\n  }\n\n  if (options?.each) {\n    decorators.push(ArrayNotEmpty(), ToArray());\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function UUIDFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ each: boolean; swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    UUIDField({ required: false, ...options }),\n  );\n}\n\nexport function URLField(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(StringField(options), IsUrl());\n}\n\nexport function URLFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    URLField({ required: false, ...options }),\n  );\n}\n\nexport function DateField(\n  options: Omit<ApiPropertyOptions, 'type'> & Partial<{ swagger: false }> = {},\n): PropertyDecorator {\n  const decorators = [Type(() => Date), IsDate()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty(options));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function DateFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ swagger: false }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    DateField({ ...options, required: false }),\n  );\n}\n",
            "properties": [
                {
                    "name": "each",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "int",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "isPositive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "maximum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "minimum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "swagger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPageMetaDtoParameters",
            "id": "interface-IPageMetaDtoParameters-37d9367d9486ec2e0ed860278ca10bde13189907f95ab8932e6177e41d2d6fe2c2d82d741a1874a9b2788313dc68737593e73c91082ef2dbd02a5c7be546bd70",
            "file": "src/common/dto/page-meta.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\n\nimport type { PageOptionsDto } from './page-options.dto';\n\ninterface IPageMetaDtoParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\nexport class PageMetaDto {\n  @ApiProperty()\n  readonly page: number;\n\n  @ApiProperty()\n  readonly take: number;\n\n  @ApiProperty()\n  readonly itemCount: number;\n\n  @ApiProperty()\n  readonly pageCount: number;\n\n  @ApiProperty()\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty()\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: IPageMetaDtoParameters) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page < this.pageCount;\n  }\n}\n",
            "properties": [
                {
                    "name": "itemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pageOptionsDto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PageOptionsDto",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IStringFieldOptions",
            "id": "interface-IStringFieldOptions-b3d0185a23f92251448074230e1515268245f952a66c11a11766005db3181fe22e9a825a5b256dd77644ca04359054035e912a16eed788ce74bc86019e622d19",
            "file": "src/decorators/field.decorators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { applyDecorators } from '@nestjs/common';\nimport type { ApiPropertyOptions } from '@nestjs/swagger';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMaxSize,\n  ArrayMinSize,\n  ArrayNotEmpty,\n  IsBoolean,\n  IsDate,\n  IsEmail,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsPositive,\n  IsString,\n  IsUrl,\n  IsUUID,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport _ from 'lodash';\n\nimport { supportedLanguageCount } from '../constants';\nimport { ApiEnumProperty, ApiUUIDProperty } from './property.decorators';\nimport {\n  PhoneNumberSerializer,\n  ToArray,\n  ToBoolean,\n  ToLowerCase,\n  ToUpperCase,\n  Trim,\n} from './transform.decorators';\nimport { IsPassword, IsPhoneNumber, IsTmpKey } from './validator.decorators';\n\ntype RequireField<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\ninterface IStringFieldOptions {\n  minLength?: number;\n  maxLength?: number;\n  toLowerCase?: boolean;\n  toUpperCase?: boolean;\n  swagger?: boolean;\n}\n\ninterface INumberFieldOptions {\n  each?: boolean;\n  minimum?: number;\n  maximum?: number;\n  int?: boolean;\n  isPositive?: boolean;\n  swagger?: boolean;\n}\n\nexport function NumberField(\n  options: Omit<ApiPropertyOptions, 'type'> & INumberFieldOptions = {},\n): PropertyDecorator {\n  const decorators = [Type(() => Number)];\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { each, int, minimum, maximum, isPositive, swagger } = options;\n\n  if (swagger !== false) {\n    decorators.push(\n      ApiProperty({ type: Number, ...options, example: int ? 1 : 1.2 }),\n    );\n  }\n\n  if (each) {\n    decorators.push(ToArray());\n  }\n\n  if (int) {\n    decorators.push(IsInt({ each }));\n  } else {\n    decorators.push(IsNumber({}, { each }));\n  }\n\n  if (_.isNumber(minimum)) {\n    decorators.push(Min(minimum, { each }));\n  }\n\n  if (_.isNumber(maximum)) {\n    decorators.push(Max(maximum, { each }));\n  }\n\n  if (isPositive) {\n    decorators.push(IsPositive({ each }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function NumberFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{\n      each: boolean;\n      int: boolean;\n      isPositive: boolean;\n    }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    NumberField({ required: false, ...options }),\n  );\n}\n\nexport function StringField(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  const decorators = [IsNotEmpty(), IsString(), Trim()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: String, ...options }));\n  }\n\n  if (options?.minLength) {\n    decorators.push(MinLength(options.minLength));\n  }\n\n  if (options?.maxLength) {\n    decorators.push(MaxLength(options.maxLength));\n  }\n\n  if (options?.toLowerCase) {\n    decorators.push(ToLowerCase());\n  }\n\n  if (options?.toUpperCase) {\n    decorators.push(ToUpperCase());\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function StringFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    StringField({ required: false, ...options }),\n  );\n}\n\nexport function PasswordField(\n  options: Omit<ApiPropertyOptions, 'type' | 'minLength'> &\n    IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    StringField({ format: '^[\\\\d!#$%&*@A-Z^a-z]*$', ...options }),\n    IsPassword(),\n  );\n}\n\nexport function PasswordFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required' | 'minLength'> &\n    IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    PasswordField({ required: false, ...options }),\n  );\n}\n\nexport function BooleanField(\n  options: Omit<ApiPropertyOptions, 'type'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  const decorators = [IsBoolean(), ToBoolean()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: Boolean, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function BooleanFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    BooleanField({ required: false, ...options }),\n  );\n}\n\nexport function TranslationsField(\n  options: RequireField<Omit<ApiPropertyOptions, 'isArray'>, 'type'> &\n    Partial<{ swagger: boolean }>,\n): PropertyDecorator {\n  const decorators = [\n    ArrayMinSize(supportedLanguageCount),\n    ArrayMaxSize(supportedLanguageCount),\n    ValidateNested({\n      each: true,\n    }),\n    Type(() => options.type as FunctionConstructor),\n  ];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ isArray: true, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function TranslationsFieldOptional(\n  options: RequireField<Omit<ApiPropertyOptions, 'isArray'>, 'type'> &\n    Partial<{ swagger: boolean }>,\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    TranslationsField({ required: false, ...options }),\n  );\n}\n\nexport function TmpKeyField(\n  options: Omit<ApiPropertyOptions, 'type'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  const decorators = [IsTmpKey()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: String, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function TmpKeyFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    TmpKeyField({ required: false, ...options }),\n  );\n}\n\nexport function EnumField<TEnum>(\n  getEnum: () => TEnum,\n  options: Omit<ApiPropertyOptions, 'type' | 'enum' | 'enumName'> &\n    Partial<{\n      each: boolean;\n      swagger: boolean;\n    }> = {},\n): PropertyDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const enumValue = getEnum() as any;\n  const decorators = [IsEnum(enumValue, { each: options.each })];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiEnumProperty(getEnum, options));\n  }\n\n  if (options.each) {\n    decorators.push(ToArray());\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function EnumFieldOptional<TEnum>(\n  getEnum: () => TEnum,\n  options: Omit<ApiPropertyOptions, 'type' | 'required' | 'enum' | 'enumName'> &\n    Partial<{ each: boolean; swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    EnumField(getEnum, { required: false, ...options }),\n  );\n}\n\nexport function EmailField(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  const decorators = [\n    IsEmail(),\n    StringField({ toLowerCase: true, ...options }),\n  ];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: String, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function EmailFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    EmailField({ required: false, ...options }),\n  );\n}\n\nexport function PhoneField(\n  options: Omit<ApiPropertyOptions, 'type'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  const decorators = [IsPhoneNumber(), PhoneNumberSerializer()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty({ type: String, ...options }));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function PhoneFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    PhoneField({ required: false, ...options }),\n  );\n}\n\nexport function UUIDField(\n  options: Omit<ApiPropertyOptions, 'type' | 'format'> &\n    Partial<{ each: boolean; swagger: boolean }> = {},\n): PropertyDecorator {\n  const decorators = [IsUUID('4', { each: options?.each })];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiUUIDProperty(options));\n  }\n\n  if (options?.each) {\n    decorators.push(ArrayNotEmpty(), ToArray());\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function UUIDFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ each: boolean; swagger: boolean }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    UUIDField({ required: false, ...options }),\n  );\n}\n\nexport function URLField(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(StringField(options), IsUrl());\n}\n\nexport function URLFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type'> & IStringFieldOptions = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    URLField({ required: false, ...options }),\n  );\n}\n\nexport function DateField(\n  options: Omit<ApiPropertyOptions, 'type'> & Partial<{ swagger: false }> = {},\n): PropertyDecorator {\n  const decorators = [Type(() => Date), IsDate()];\n\n  if (options?.swagger !== false) {\n    decorators.push(ApiProperty(options));\n  }\n\n  return applyDecorators(...decorators);\n}\n\nexport function DateFieldOptional(\n  options: Omit<ApiPropertyOptions, 'type' | 'required'> &\n    Partial<{ swagger: false }> = {},\n): PropertyDecorator {\n  return applyDecorators(\n    IsOptional(),\n    DateField({ ...options, required: false }),\n  );\n}\n",
            "properties": [
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "swagger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "toLowerCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "toUpperCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITranslationDecoratorInterface",
            "id": "interface-ITranslationDecoratorInterface-0e7e3fe9e580a34eeb0f8997c788afcde69c51c2a28cd1709908e4752322c1addf088a86b1afc957b736ba21359e3cd85b7c9a8bd1ca0f47c04dbed98a58cbaf",
            "file": "src/interfaces/ITranslationDecoratorInterface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITranslationDecoratorInterface {\n  translationKey: string;\n}\n",
            "properties": [
                {
                    "name": "translationKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IUniqueValidationArguments",
            "id": "interface-IUniqueValidationArguments-6996f148d06e13d4668db19c5f789fc49f959e1c163293e8bf96f48af897c2f6a7becaa04e21c13e0bf9fe0c1b62ebbfc5daf4432292270906e21a48256b2b77",
            "file": "src/validators/unique.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/typeorm';\nimport type {\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { registerDecorator, ValidatorConstraint } from 'class-validator';\nimport type { EntitySchema, FindConditions, ObjectType } from 'typeorm';\nimport { Connection } from 'typeorm';\n\n@Injectable()\n@ValidatorConstraint({ name: 'unique', async: true })\nexport class UniqueValidator implements ValidatorConstraintInterface {\n  constructor(@InjectConnection() private readonly connection: Connection) {}\n\n  public async validate<E>(\n    value: string,\n    args: IUniqueValidationArguments<E>,\n  ): Promise<boolean> {\n    const [entityClass, findCondition = args.property] = args.constraints;\n\n    return (\n      (await this.connection.getRepository(entityClass).count({\n        where:\n          typeof findCondition === 'function'\n            ? findCondition(args)\n            : {\n                [findCondition || args.property]: value,\n              },\n      })) <= 0\n    );\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [entityClass] = args.constraints;\n    const entity = entityClass.name || 'Entity';\n\n    return `${entity} with the same ${args.property} already exists`;\n  }\n}\n\ntype UniqueValidationConstraints<E> = [\n  ObjectType<E> | EntitySchema<E> | string,\n  ((validationArguments: ValidationArguments) => FindConditions<E>) | keyof E,\n];\ninterface IUniqueValidationArguments<E> extends ValidationArguments {\n  constraints: UniqueValidationConstraints<E>;\n}\n\nexport function Unique<E>(\n  constraints: Partial<UniqueValidationConstraints<E>>,\n  validationOptions?: ValidationOptions,\n): PropertyDecorator {\n  return function (object, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints,\n      validator: UniqueValidator,\n    });\n  };\n}\n",
            "properties": [
                {
                    "name": "constraints",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UniqueValidationConstraints<E>",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ValidationArguments"
        },
        {
            "name": "IUserEntity",
            "id": "interface-IUserEntity-a593637cd59a201540e6a443bf850396a4964228b61f77f41ec4bb05d619b066dec407c7fcaf4030d0d1cd8c745b9d65f37d01722af428ffbeb333c1868412c6",
            "file": "src/modules/user/user.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Column, Entity, OneToOne } from 'typeorm';\n\nimport type { IAbstractEntity } from '../../common/abstract.entity';\nimport { AbstractEntity } from '../../common/abstract.entity';\nimport { RoleType } from '../../constants';\nimport { UseDto, VirtualColumn } from '../../decorators';\nimport type { UserDtoOptions } from './dto/user.dto';\nimport { UserDto } from './dto/user.dto';\nimport type { IUserSettingsEntity } from './user-settings.entity';\nimport { UserSettingsEntity } from './user-settings.entity';\n\nexport interface IUserEntity extends IAbstractEntity<UserDto> {\n  firstName?: string;\n\n  lastName?: string;\n\n  role: RoleType;\n\n  email?: string;\n\n  password?: string;\n\n  phone?: string;\n\n  avatar?: string;\n\n  fullName?: string;\n\n  settings?: IUserSettingsEntity;\n}\n\n@Entity({ name: 'users' })\n@UseDto(UserDto)\nexport class UserEntity\n  extends AbstractEntity<UserDto, UserDtoOptions>\n  implements IUserEntity\n{\n  @Column({ nullable: true })\n  firstName?: string;\n\n  @Column({ nullable: true })\n  lastName?: string;\n\n  @Column({ type: 'enum', enum: RoleType, default: RoleType.USER })\n  role: RoleType;\n\n  @Column({ unique: true, nullable: true })\n  email?: string;\n\n  @Column({ nullable: true })\n  password?: string;\n\n  @Column({ nullable: true })\n  phone?: string;\n\n  @Column({ nullable: true })\n  avatar?: string;\n\n  @VirtualColumn()\n  fullName?: string;\n\n  @OneToOne(() => UserSettingsEntity, (userSettings) => userSettings.user)\n  settings?: UserSettingsEntity;\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoleType",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserSettingsEntity",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IAbstractEntity"
        },
        {
            "name": "IUserSettingsEntity",
            "id": "interface-IUserSettingsEntity-8a64742c0b51ce3a908ab00a6e48d0a18928085ff03bf97a0669186ddc705ad3c4649d24715dc7cb1fb4918806b3c23057cfa6c3d48b3a91b6bf08500be8e69b",
            "file": "src/modules/user/user-settings.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Column, Entity, JoinColumn, OneToOne } from 'typeorm';\n\nimport type { IAbstractEntity } from '../../common/abstract.entity';\nimport { AbstractEntity } from '../../common/abstract.entity';\nimport { UseDto } from '../../decorators';\nimport type { UserDtoOptions } from './dto/user.dto';\nimport { UserDto } from './dto/user.dto';\nimport type { IUserEntity } from './user.entity';\nimport { UserEntity } from './user.entity';\n\nexport interface IUserSettingsEntity extends IAbstractEntity<UserDto> {\n  isEmailVerified?: boolean;\n\n  isPhoneVerified?: boolean;\n\n  user?: IUserEntity;\n}\n\n@Entity({ name: 'user_settings' })\n@UseDto(UserDto)\nexport class UserSettingsEntity\n  extends AbstractEntity<UserDto, UserDtoOptions>\n  implements IUserSettingsEntity\n{\n  @Column({ default: false })\n  isEmailVerified?: boolean;\n\n  @Column({ default: false })\n  isPhoneVerified?: boolean;\n\n  @Column({ type: 'uuid' })\n  userId?: string;\n\n  @OneToOne(() => UserEntity, (user) => user.settings)\n  @JoinColumn({ name: 'user_id' })\n  user?: UserEntity;\n}\n",
            "properties": [
                {
                    "name": "isEmailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isPhoneVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserEntity",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IAbstractEntity"
        },
        {
            "name": "QueryBuilder",
            "id": "interface-QueryBuilder-6a502edd2aaa8ed2008dd142c9aa9c07301e8d38073031f83195d529f7e97a3aaa0eee0fd2160380a50cdd7f619caae9c7029a0d5d6f05487b19e81cb32b05ce",
            "file": "src/boilerplate.polyfill.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import 'source-map-support/register';\n\nimport { compact, map } from 'lodash';\nimport { Brackets, QueryBuilder, SelectQueryBuilder } from 'typeorm';\n\nimport type { AbstractEntity } from './common/abstract.entity';\nimport type { AbstractDto } from './common/dto/abstract.dto';\nimport { PageDto } from './common/dto/page.dto';\nimport { PageMetaDto } from './common/dto/page-meta.dto';\nimport type { PageOptionsDto } from './common/dto/page-options.dto';\nimport { VIRTUAL_COLUMN_KEY } from './decorators/virtual-column.decorator';\n\ndeclare global {\n  interface Array<T> {\n    toDtos<Dto extends AbstractDto>(this: T[], options?: any): Dto[];\n\n    toPageDto<Dto extends AbstractDto>(\n      this: T[],\n      pageMetaDto: PageMetaDto,\n      // FIXME make option type visible from entity\n      options?: any,\n    ): PageDto<Dto>;\n  }\n}\n\ndeclare module 'typeorm' {\n  interface QueryBuilder<Entity> {\n    searchByString(q: string, columnNames: string[]): this;\n  }\n\n  interface SelectQueryBuilder<Entity> {\n    paginate(\n      this: SelectQueryBuilder<Entity>,\n      pageOptionsDto: PageOptionsDto,\n      options?: Partial<{ takeAll: boolean }>,\n    ): Promise<[Entity[], PageMetaDto]>;\n  }\n}\n\nArray.prototype.toDtos = function <\n  Entity extends AbstractEntity<Dto>,\n  Dto extends AbstractDto,\n>(options?: any): Dto[] {\n  return compact(\n    map<Entity, Dto>(this, (item) => item.toDto(options as never)),\n  );\n};\n\nArray.prototype.toPageDto = function (pageMetaDto: PageMetaDto, options?: any) {\n  return new PageDto(this.toDtos(options), pageMetaDto);\n};\n\nQueryBuilder.prototype.searchByString = function (q, columnNames) {\n  if (!q) {\n    return this;\n  }\n\n  this.andWhere(\n    new Brackets((qb) => {\n      for (const item of columnNames) {\n        qb.orWhere(`${item} ILIKE :q`);\n      }\n    }),\n  );\n\n  this.setParameter('q', `%${q}%`);\n\n  return this;\n};\n\nSelectQueryBuilder.prototype.paginate = async function (\n  pageOptionsDto: PageOptionsDto,\n  options?: Partial<{ takeAll: boolean }>,\n) {\n  if (options?.takeAll) {\n    this.skip(pageOptionsDto.skip).take(pageOptionsDto.take);\n  }\n\n  const itemCount = await this.getCount();\n\n  const { entities, raw } = await this.getRawAndEntities();\n\n  const items = entities.map((entity, index) => {\n    const metaInfo = Reflect.getMetadata(VIRTUAL_COLUMN_KEY, entity) ?? {};\n    const item = raw[index];\n\n    for (const [propertyKey, name] of Object.entries<string>(metaInfo)) {\n      entity[propertyKey] = item[name];\n    }\n\n    return entity;\n  });\n\n  const pageMetaDto = new PageMetaDto({\n    itemCount,\n    pageOptionsDto,\n  });\n\n  return [items, pageMetaDto];\n};\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "searchByString",
                    "args": [
                        {
                            "name": "q",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columnNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "q",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "SelectQueryBuilder",
            "id": "interface-SelectQueryBuilder-6a502edd2aaa8ed2008dd142c9aa9c07301e8d38073031f83195d529f7e97a3aaa0eee0fd2160380a50cdd7f619caae9c7029a0d5d6f05487b19e81cb32b05ce",
            "file": "src/boilerplate.polyfill.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import 'source-map-support/register';\n\nimport { compact, map } from 'lodash';\nimport { Brackets, QueryBuilder, SelectQueryBuilder } from 'typeorm';\n\nimport type { AbstractEntity } from './common/abstract.entity';\nimport type { AbstractDto } from './common/dto/abstract.dto';\nimport { PageDto } from './common/dto/page.dto';\nimport { PageMetaDto } from './common/dto/page-meta.dto';\nimport type { PageOptionsDto } from './common/dto/page-options.dto';\nimport { VIRTUAL_COLUMN_KEY } from './decorators/virtual-column.decorator';\n\ndeclare global {\n  interface Array<T> {\n    toDtos<Dto extends AbstractDto>(this: T[], options?: any): Dto[];\n\n    toPageDto<Dto extends AbstractDto>(\n      this: T[],\n      pageMetaDto: PageMetaDto,\n      // FIXME make option type visible from entity\n      options?: any,\n    ): PageDto<Dto>;\n  }\n}\n\ndeclare module 'typeorm' {\n  interface QueryBuilder<Entity> {\n    searchByString(q: string, columnNames: string[]): this;\n  }\n\n  interface SelectQueryBuilder<Entity> {\n    paginate(\n      this: SelectQueryBuilder<Entity>,\n      pageOptionsDto: PageOptionsDto,\n      options?: Partial<{ takeAll: boolean }>,\n    ): Promise<[Entity[], PageMetaDto]>;\n  }\n}\n\nArray.prototype.toDtos = function <\n  Entity extends AbstractEntity<Dto>,\n  Dto extends AbstractDto,\n>(options?: any): Dto[] {\n  return compact(\n    map<Entity, Dto>(this, (item) => item.toDto(options as never)),\n  );\n};\n\nArray.prototype.toPageDto = function (pageMetaDto: PageMetaDto, options?: any) {\n  return new PageDto(this.toDtos(options), pageMetaDto);\n};\n\nQueryBuilder.prototype.searchByString = function (q, columnNames) {\n  if (!q) {\n    return this;\n  }\n\n  this.andWhere(\n    new Brackets((qb) => {\n      for (const item of columnNames) {\n        qb.orWhere(`${item} ILIKE :q`);\n      }\n    }),\n  );\n\n  this.setParameter('q', `%${q}%`);\n\n  return this;\n};\n\nSelectQueryBuilder.prototype.paginate = async function (\n  pageOptionsDto: PageOptionsDto,\n  options?: Partial<{ takeAll: boolean }>,\n) {\n  if (options?.takeAll) {\n    this.skip(pageOptionsDto.skip).take(pageOptionsDto.take);\n  }\n\n  const itemCount = await this.getCount();\n\n  const { entities, raw } = await this.getRawAndEntities();\n\n  const items = entities.map((entity, index) => {\n    const metaInfo = Reflect.getMetadata(VIRTUAL_COLUMN_KEY, entity) ?? {};\n    const item = raw[index];\n\n    for (const [propertyKey, name] of Object.entries<string>(metaInfo)) {\n      entity[propertyKey] = item[name];\n    }\n\n    return entity;\n  });\n\n  const pageMetaDto = new PageMetaDto({\n    itemCount,\n    pageOptionsDto,\n  });\n\n  return [items, pageMetaDto];\n};\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "paginate",
                    "args": [
                        {
                            "name": "this",
                            "type": "SelectQueryBuilder<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageOptionsDto",
                            "type": "PageOptionsDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "Partial<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "SelectQueryBuilder<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageOptionsDto",
                            "type": "PageOptionsDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "Partial<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "injectables": [
        {
            "name": "ApiConfigService",
            "id": "injectable-ApiConfigService-a4ef43e9a2934568c3273cf6ef606fdfaa8a413aed187043ffae16754cbbe9699eaa9862672d2f302ebb90f9b254a346a2cd4cc94cb1a3de8cab983ac0468db7",
            "file": "src/shared/services/api-config.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoolean",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNumber",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getString",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport type { TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { isNil } from 'lodash';\n\nimport { UserSubscriber } from '../../entity-subscribers/user-subscriber';\nimport { SnakeNamingStrategy } from '../../snake-naming.strategy';\n\n@Injectable()\nexport class ApiConfigService {\n  constructor(private configService: ConfigService) {}\n\n  get isDevelopment(): boolean {\n    return this.nodeEnv === 'development';\n  }\n\n  get isProduction(): boolean {\n    return this.nodeEnv === 'production';\n  }\n\n  get isTest(): boolean {\n    return this.nodeEnv === 'test';\n  }\n\n  private getNumber(key: string): number {\n    const value = this.get(key);\n\n    try {\n      return Number(value);\n    } catch {\n      throw new Error(key + ' environment variable is not a number');\n    }\n  }\n\n  private getBoolean(key: string): boolean {\n    const value = this.get(key);\n\n    try {\n      return Boolean(JSON.parse(value));\n    } catch {\n      throw new Error(key + ' env var is not a boolean');\n    }\n  }\n\n  private getString(key: string): string {\n    const value = this.get(key);\n\n    return value.replace(/\\\\n/g, '\\n');\n  }\n\n  get nodeEnv(): string {\n    return this.getString('NODE_ENV');\n  }\n\n  get fallbackLanguage(): string {\n    return this.getString('FALLBACK_LANGUAGE').toLowerCase();\n  }\n\n  get postgresConfig(): TypeOrmModuleOptions {\n    let entities = [__dirname + '/../../modules/**/*.entity{.ts,.js}'];\n    let migrations = [__dirname + '/../../database/migrations/*{.ts,.js}'];\n\n    if (module.hot) {\n      const entityContext = require.context(\n        './../../modules',\n        true,\n        /\\.entity\\.ts$/,\n      );\n      entities = entityContext.keys().map((id) => {\n        const entityModule = entityContext<Record<string, unknown>>(id);\n        const [entity] = Object.values(entityModule);\n\n        return entity as string;\n      });\n      const migrationContext = require.context(\n        './../../database/migrations',\n        false,\n        /\\.ts$/,\n      );\n\n      migrations = migrationContext.keys().map((id) => {\n        const migrationModule = migrationContext<Record<string, unknown>>(id);\n        const [migration] = Object.values(migrationModule);\n\n        return migration as string;\n      });\n    }\n\n    return {\n      entities,\n      migrations,\n      keepConnectionAlive: !this.isTest,\n      dropSchema: this.isTest,\n      type: 'postgres',\n      name: 'default',\n      host: this.getString('DB_HOST'),\n      port: this.getNumber('DB_PORT'),\n      username: this.getString('DB_USERNAME'),\n      password: this.getString('DB_PASSWORD'),\n      database: this.getString('DB_DATABASE'),\n      subscribers: [UserSubscriber],\n      migrationsRun: true,\n      logging: this.getBoolean('ENABLE_ORM_LOGS'),\n      namingStrategy: new SnakeNamingStrategy(),\n    };\n  }\n\n  get awsS3Config() {\n    return {\n      bucketRegion: this.getString('AWS_S3_BUCKET_REGION'),\n      bucketApiVersion: this.getString('AWS_S3_API_VERSION'),\n      bucketName: this.getString('AWS_S3_BUCKET_NAME'),\n    };\n  }\n\n  get documentationEnabled(): boolean {\n    return this.getBoolean('ENABLE_DOCUMENTATION');\n  }\n\n  get natsEnabled(): boolean {\n    return this.getBoolean('NATS_ENABLED');\n  }\n\n  get natsConfig() {\n    return {\n      host: this.getString('NATS_HOST'),\n      port: this.getNumber('NATS_PORT'),\n    };\n  }\n\n  get authConfig() {\n    return {\n      jwtSecret: this.getString('JWT_SECRET_KEY'),\n      jwtExpirationTime: this.getNumber('JWT_EXPIRATION_TIME'),\n    };\n  }\n\n  get appConfig() {\n    return {\n      port: this.getString('PORT'),\n    };\n  }\n\n  private get(key: string): string {\n    const value = this.configService.get<string>(key);\n\n    if (isNil(value)) {\n      throw new Error(key + ' environment variable does not set'); // probably we should call process.exit() too to avoid locking the service\n    }\n\n    return value;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isDevelopment": {
                    "name": "isDevelopment",
                    "getSignature": {
                        "name": "isDevelopment",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 13
                    }
                },
                "isProduction": {
                    "name": "isProduction",
                    "getSignature": {
                        "name": "isProduction",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 17
                    }
                },
                "isTest": {
                    "name": "isTest",
                    "getSignature": {
                        "name": "isTest",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 21
                    }
                },
                "nodeEnv": {
                    "name": "nodeEnv",
                    "getSignature": {
                        "name": "nodeEnv",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                },
                "fallbackLanguage": {
                    "name": "fallbackLanguage",
                    "getSignature": {
                        "name": "fallbackLanguage",
                        "type": "string",
                        "returnType": "string",
                        "line": 55
                    }
                },
                "postgresConfig": {
                    "name": "postgresConfig",
                    "getSignature": {
                        "name": "postgresConfig",
                        "type": "",
                        "returnType": "TypeOrmModuleOptions",
                        "line": 59
                    }
                },
                "awsS3Config": {
                    "name": "awsS3Config",
                    "getSignature": {
                        "name": "awsS3Config",
                        "type": "",
                        "returnType": "",
                        "line": 108
                    }
                },
                "documentationEnabled": {
                    "name": "documentationEnabled",
                    "getSignature": {
                        "name": "documentationEnabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 116
                    }
                },
                "natsEnabled": {
                    "name": "natsEnabled",
                    "getSignature": {
                        "name": "natsEnabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 120
                    }
                },
                "natsConfig": {
                    "name": "natsConfig",
                    "getSignature": {
                        "name": "natsConfig",
                        "type": "",
                        "returnType": "",
                        "line": 124
                    }
                },
                "authConfig": {
                    "name": "authConfig",
                    "getSignature": {
                        "name": "authConfig",
                        "type": "",
                        "returnType": "",
                        "line": 131
                    }
                },
                "appConfig": {
                    "name": "appConfig",
                    "getSignature": {
                        "name": "appConfig",
                        "type": "",
                        "returnType": "",
                        "line": 138
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-20db17a8367b4f3ee4ac94b8276d6d2e0bf0b3e5259193241d7ce9fbf28fd6c4642a0a151e3d52eb4efeea41193a6616a9be5222372099776e86dbff3d37240e",
            "file": "src/modules/auth/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createAccessToken",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TokenPayloadDto>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateUser",
                    "args": [
                        {
                            "name": "userLoginDto",
                            "type": "UserLoginDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UserEntity>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userLoginDto",
                            "type": "UserLoginDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { validateHash } from '../../common/utils';\nimport type { RoleType } from '../../constants';\nimport { TokenType } from '../../constants';\nimport { UserNotFoundException } from '../../exceptions';\nimport { ApiConfigService } from '../../shared/services/api-config.service';\nimport type { UserEntity } from '../user/user.entity';\nimport { UserService } from '../user/user.service';\nimport { TokenPayloadDto } from './dto/TokenPayloadDto';\nimport type { UserLoginDto } from './dto/UserLoginDto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ApiConfigService,\n    private userService: UserService,\n  ) {}\n\n  async createAccessToken(data: {\n    role: RoleType;\n    userId: string;\n  }): Promise<TokenPayloadDto> {\n    return new TokenPayloadDto({\n      expiresIn: this.configService.authConfig.jwtExpirationTime,\n      accessToken: await this.jwtService.signAsync({\n        userId: data.userId,\n        type: TokenType.ACCESS_TOKEN,\n        role: data.role,\n      }),\n    });\n  }\n\n  async validateUser(userLoginDto: UserLoginDto): Promise<UserEntity> {\n    const user = await this.userService.findOne({\n      email: userLoginDto.email,\n    });\n\n    const isPasswordValid = await validateHash(\n      userLoginDto.password,\n      user?.password,\n    );\n\n    if (!isPasswordValid) {\n      throw new UserNotFoundException();\n    }\n\n    return user!;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jwtService",
                        "type": "JwtService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ApiConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "jwtService",
                        "type": "JwtService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ApiConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthUserInterceptor",
            "id": "injectable-AuthUserInterceptor-b0bb09583dfcfc40b26a8facf0491da545e6a47d1a3b222a6e2775bc6abb36770d4f8fc29a1f20a00113f92bb4198d37d9a4657613a12e8fa951a24e363c5826",
            "file": "src/interceptors/auth-user-interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import type {\n  CallHandler,\n  ExecutionContext,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Injectable } from '@nestjs/common';\n\nimport type { UserEntity } from '../modules/user/user.entity';\nimport { ContextProvider } from '../providers/context.provider';\n\n@Injectable()\nexport class AuthUserInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler) {\n    const request = context.switchToHttp().getRequest();\n\n    const user = <UserEntity>request.user;\n    ContextProvider.setAuthUser(user);\n\n    return next.handle();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "AwsS3Service",
            "id": "injectable-AwsS3Service-f89d37d5045e7fd8f520058fb0c7ba8bd23d8d4410b2cd64a20cd97c2f0e79387f0b89a123e7a9f933b68b6a64129ccd6676359ea6ec13dddf02b94a2b9a37ee",
            "file": "src/shared/services/aws-s3.service.ts",
            "properties": [
                {
                    "name": "configService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiConfigService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "generatorService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GeneratorService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "s3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AWS.S3",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "uploadImage",
                    "args": [
                        {
                            "name": "file",
                            "type": "IFile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "IFile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport AWS from 'aws-sdk';\nimport mime from 'mime-types';\n\nimport type { IFile } from '../../interfaces';\nimport { ApiConfigService } from './api-config.service';\nimport { GeneratorService } from './generator.service';\n\n@Injectable()\nexport class AwsS3Service {\n  private readonly s3: AWS.S3;\n\n  constructor(\n    public configService: ApiConfigService,\n    public generatorService: GeneratorService,\n  ) {\n    const awsS3Config = configService.awsS3Config;\n\n    const options: AWS.S3.Types.ClientConfiguration = {\n      apiVersion: awsS3Config.bucketApiVersion,\n      region: awsS3Config.bucketRegion,\n    };\n\n    this.s3 = new AWS.S3(options);\n  }\n\n  async uploadImage(file: IFile): Promise<string> {\n    const fileName = this.generatorService.fileName(\n      <string>mime.extension(file.mimetype),\n    );\n    const key = 'images/' + fileName;\n    await this.s3\n      .putObject({\n        Bucket: this.configService.awsS3Config.bucketName,\n        Body: file.buffer,\n        ACL: 'public-read',\n        Key: key,\n      })\n      .promise();\n\n    return key;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ApiConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "generatorService",
                        "type": "GeneratorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ApiConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "generatorService",
                        "type": "GeneratorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ExistsValidator",
            "id": "injectable-ExistsValidator-be624efd6f864998f93c3cf33cfed1acc1167f14c944f7b3b6a1a3e438beeb0b84ad654c367bb7e520e3503d7c885a51c5542a3f8957f1458f83b8b6ada1b4f5",
            "file": "src/validators/exists.validator.ts",
            "properties": [],
            "methods": [
                {
                    "name": "defaultMessage",
                    "args": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "IExistsValidationArguments<E>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "IExistsValidationArguments<E>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/typeorm';\nimport type {\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { registerDecorator, ValidatorConstraint } from 'class-validator';\nimport type { EntitySchema, FindConditions, ObjectType } from 'typeorm';\nimport { Connection } from 'typeorm';\n\n@Injectable()\n@ValidatorConstraint({ name: 'exists', async: true })\nexport class ExistsValidator implements ValidatorConstraintInterface {\n  constructor(@InjectConnection() private readonly connection: Connection) {}\n\n  public async validate<E>(\n    value: string,\n    args: IExistsValidationArguments<E>,\n  ): Promise<boolean> {\n    const [entityClass, findCondition = args.property] = args.constraints;\n\n    return (\n      (await this.connection.getRepository(entityClass).count({\n        where:\n          typeof findCondition === 'function'\n            ? findCondition(args)\n            : {\n                [findCondition || args.property]: value,\n              },\n      })) > 0\n    );\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [entityClass] = args.constraints;\n    const entity = entityClass.name || 'Entity';\n\n    return `The selected ${args.property}  does not exist in ${entity} entity`;\n  }\n}\n\ntype ExistsValidationConstraints<E> = [\n  ObjectType<E> | EntitySchema<E> | string,\n  ((validationArguments: ValidationArguments) => FindConditions<E>) | keyof E,\n];\ninterface IExistsValidationArguments<E> extends ValidationArguments {\n  constraints: ExistsValidationConstraints<E>;\n}\n\nexport function Exists<E>(\n  constraints: Partial<ExistsValidationConstraints<E>>,\n  validationOptions?: ValidationOptions,\n): PropertyDecorator {\n  return (object, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints,\n      validator: ExistsValidator,\n    });\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "connection",
                        "type": "Connection",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "connection",
                        "type": "Connection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GeneratorService",
            "id": "injectable-GeneratorService-431667aab4c5988c6200d89a2b03256c4818afaf4cd9c242a120f633f916e399e22a20fe2b73f12ba93ee0e3fcee341539825be510fc5570bdb9f5f171cd1747",
            "file": "src/shared/services/generator.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fileName",
                    "args": [
                        {
                            "name": "ext",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "ext",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uuid",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { v1 as uuid } from 'uuid';\n\n@Injectable()\nexport class GeneratorService {\n  public uuid(): string {\n    return uuid();\n  }\n\n  public fileName(ext: string): string {\n    return this.uuid() + '.' + ext;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "JwtStrategy",
            "id": "injectable-JwtStrategy-8231e938256cba7926002995ae44a0dbe0acbd75820c701637d43b22bba179c06e373a9b9fc50afbf39022d9c25c73a5c7458dc3e4231674f2865d4e679c3c73",
            "file": "src/modules/auth/jwt.strategy.ts",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "args",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UserEntity>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport type { RoleType } from '../../constants';\nimport { TokenType } from '../../constants';\nimport { ApiConfigService } from '../../shared/services/api-config.service';\nimport type { UserEntity } from '../user/user.entity';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ApiConfigService,\n    private userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.authConfig.jwtSecret,\n    });\n  }\n\n  async validate(args: {\n    userId: string;\n    role: RoleType;\n    type: TokenType;\n  }): Promise<UserEntity> {\n    if (args.type !== TokenType.ACCESS_TOKEN) {\n      throw new UnauthorizedException();\n    }\n\n    const user = await this.userService.findOne({\n      id: args.userId,\n      role: args.role,\n    });\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ApiConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ApiConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PublicStrategy",
            "id": "injectable-PublicStrategy-8f8fa3f4f45f5e3ddaba992dfe9db4b2a1cbd8290d7d8822c4df169cb68d29109d96b1eb4bb1ab6a60f321177fcc7a124a345f0aacdca474c158cf47213f1bef",
            "file": "src/modules/auth/public.strategy.ts",
            "properties": [],
            "methods": [
                {
                    "name": "authenticate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport';\n\n@Injectable()\nexport class PublicStrategy extends PassportStrategy(Strategy, 'public') {\n  constructor() {\n    super();\n  }\n\n  authenticate(): void {\n    return this.success({ [Symbol.for('isPublic')]: true });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "ServiceHealthIndicator",
            "id": "injectable-ServiceHealthIndicator-6d668fb37edee281a231bf5287c43b3a533389c95a4618408d15cae66196f41f0a4e33666468f75ba2c9f5fb9edc7d7fff6dacca1b7e073af47ea5ec7d770aea",
            "file": "src/modules/health-checker/health-indicators/service.indicator.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isHealthy",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<HealthIndicatorResult>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Optional } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport type { HealthIndicatorResult } from '@nestjs/terminus';\nimport { HealthCheckError, HealthIndicator } from '@nestjs/terminus';\nimport { firstValueFrom } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class ServiceHealthIndicator extends HealthIndicator {\n  constructor(\n    @Optional()\n    @Inject('NATS_SERVICE')\n    private readonly clientProxy: ClientProxy,\n  ) {\n    super();\n  }\n\n  async isHealthy(eventName: string): Promise<HealthIndicatorResult> {\n    try {\n      if (!this.clientProxy) {\n        return {\n          [eventName]: {\n            status: 'down',\n          },\n        };\n      }\n\n      const result = await firstValueFrom(\n        this.clientProxy.send(eventName, { check: true }).pipe(timeout(10_000)),\n        {\n          defaultValue: undefined,\n        },\n      );\n\n      return {\n        [eventName]: result,\n      };\n    } catch (error) {\n      throw new HealthCheckError(`${eventName} failed`, {\n        [eventName]: error,\n      });\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clientProxy",
                        "type": "ClientProxy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "clientProxy",
                        "type": "ClientProxy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HealthIndicator",
            "type": "injectable"
        },
        {
            "name": "TranslationInterceptor",
            "id": "injectable-TranslationInterceptor-33c5bb3dea0ac2b84b2cfc04b0e0c5259fef8545df9098d2699b68dd05983e97122223d60000b2bfe8893998939cc9a36d922b81c45f6ffa321e6a74213177bc",
            "file": "src/interceptors/translation-interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "_context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AbstractDto>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import type {\n  CallHandler,\n  ExecutionContext,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Injectable } from '@nestjs/common';\nimport type { Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport type { AbstractDto } from '../common/dto/abstract.dto';\nimport { TranslationService } from '../shared/services/translation.service';\n\n@Injectable()\nexport class TranslationInterceptor implements NestInterceptor {\n  constructor(private readonly translationService: TranslationService) {}\n\n  public intercept(\n    _context: ExecutionContext,\n    next: CallHandler,\n  ): Observable<AbstractDto> {\n    return next\n      .handle()\n      .pipe(\n        mergeMap((data) =>\n          this.translationService.translateNecessaryKeys<AbstractDto>(data),\n        ),\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translationService",
                        "type": "TranslationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "translationService",
                        "type": "TranslationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TranslationService",
            "id": "injectable-TranslationService-73e8048926fdcdc1b64af72d13622748cb726b54c3626399143e3f18ad2ef4599a5ce21b974db3c70cb5941e35a19833f38041bb61ce8c0266b308ffceae14af",
            "file": "src/shared/services/translation.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "translate",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "translateOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "translateOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateNecessaryKeys",
                    "args": [
                        {
                            "name": "dto",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { isArray, isString, map } from 'lodash';\nimport { I18nService } from 'nestjs-i18n';\nimport type { translateOptions } from 'nestjs-i18n/dist/services/i18n.service';\n\nimport { AbstractDto } from '../../common/dto/abstract.dto';\nimport { TRANSLATION_DECORATOR_KEY } from '../../decorators/translate.decorator';\nimport type { ITranslationDecoratorInterface } from '../../interfaces';\nimport { ContextProvider } from '../../providers/context.provider';\n\n@Injectable()\nexport class TranslationService {\n  constructor(private readonly i18n: I18nService) {}\n\n  async translate(\n    key: string,\n    options: translateOptions = {},\n  ): Promise<string> {\n    return this.i18n.translate(`translations.${key}`, options);\n  }\n\n  async translateNecessaryKeys<T extends AbstractDto>(dto: T): Promise<T> {\n    await Promise.all(\n      map(dto, async (value, key) => {\n        if (isString(value)) {\n          const translateDec: ITranslationDecoratorInterface =\n            Reflect.getMetadata(TRANSLATION_DECORATOR_KEY, dto, key);\n\n          if (translateDec.translationKey) {\n            await this.translate(`${translateDec.translationKey}.${value}`, {\n              lang: ContextProvider.getLanguage(),\n            });\n          }\n\n          return;\n        }\n\n        if (value instanceof AbstractDto) {\n          await this.translateNecessaryKeys(value);\n\n          return;\n        }\n\n        if (isArray(value)) {\n          await Promise.all(\n            map(value, (v) => {\n              if (v instanceof AbstractDto) {\n                return this.translateNecessaryKeys(v);\n              }\n            }),\n          );\n        }\n      }),\n    );\n\n    return dto;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "i18n",
                        "type": "I18nService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "i18n",
                        "type": "I18nService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UniqueValidator",
            "id": "injectable-UniqueValidator-6996f148d06e13d4668db19c5f789fc49f959e1c163293e8bf96f48af897c2f6a7becaa04e21c13e0bf9fe0c1b62ebbfc5daf4432292270906e21a48256b2b77",
            "file": "src/validators/unique.validator.ts",
            "properties": [],
            "methods": [
                {
                    "name": "defaultMessage",
                    "args": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "IUniqueValidationArguments<E>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "IUniqueValidationArguments<E>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/typeorm';\nimport type {\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { registerDecorator, ValidatorConstraint } from 'class-validator';\nimport type { EntitySchema, FindConditions, ObjectType } from 'typeorm';\nimport { Connection } from 'typeorm';\n\n@Injectable()\n@ValidatorConstraint({ name: 'unique', async: true })\nexport class UniqueValidator implements ValidatorConstraintInterface {\n  constructor(@InjectConnection() private readonly connection: Connection) {}\n\n  public async validate<E>(\n    value: string,\n    args: IUniqueValidationArguments<E>,\n  ): Promise<boolean> {\n    const [entityClass, findCondition = args.property] = args.constraints;\n\n    return (\n      (await this.connection.getRepository(entityClass).count({\n        where:\n          typeof findCondition === 'function'\n            ? findCondition(args)\n            : {\n                [findCondition || args.property]: value,\n              },\n      })) <= 0\n    );\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [entityClass] = args.constraints;\n    const entity = entityClass.name || 'Entity';\n\n    return `${entity} with the same ${args.property} already exists`;\n  }\n}\n\ntype UniqueValidationConstraints<E> = [\n  ObjectType<E> | EntitySchema<E> | string,\n  ((validationArguments: ValidationArguments) => FindConditions<E>) | keyof E,\n];\ninterface IUniqueValidationArguments<E> extends ValidationArguments {\n  constraints: UniqueValidationConstraints<E>;\n}\n\nexport function Unique<E>(\n  constraints: Partial<UniqueValidationConstraints<E>>,\n  validationOptions?: ValidationOptions,\n): PropertyDecorator {\n  return function (object, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints,\n      validator: UniqueValidator,\n    });\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "connection",
                        "type": "Connection",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "connection",
                        "type": "Connection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-f8c5dd91836ed98bccb76fa92626af76f6bb60e7a9a0823a5223d6887a2769c2abde3b27823193aa8eea2b5db3568380d3fff1e0dd7cdef8a39f0f94d1704f1a",
            "file": "src/modules/user/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createSettings",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "createSettingsDto",
                            "type": "CreateSettingsDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UserSettingsEntity>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createSettingsDto",
                            "type": "CreateSettingsDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "userRegisterDto",
                            "type": "UserRegisterDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file",
                            "type": "IFile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UserEntity>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Transactional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userRegisterDto",
                            "type": "UserRegisterDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "IFile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findByUsernameOrEmail",
                    "args": [
                        {
                            "name": "options",
                            "type": "Partial<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Optional<UserEntity>>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "Partial<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "findData",
                            "type": "FindConditions<UserEntity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Optional<UserEntity>>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFind single user\n",
                    "description": "<p>Find single user</p>\n",
                    "jsdoctags": [
                        {
                            "name": "findData",
                            "type": "FindConditions<UserEntity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UserDto>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [
                        {
                            "name": "pageOptionsDto",
                            "type": "UsersPageOptionsDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PageDto<UserDto>>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageOptionsDto",
                            "type": "UsersPageOptionsDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CommandBus } from '@nestjs/cqrs';\nimport { plainToClass } from 'class-transformer';\nimport type { FindConditions } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional-cls-hooked';\n\nimport type { PageDto } from '../../common/dto/page.dto';\nimport { FileNotImageException, UserNotFoundException } from '../../exceptions';\nimport { IFile } from '../../interfaces';\nimport { AwsS3Service } from '../../shared/services/aws-s3.service';\nimport { ValidatorService } from '../../shared/services/validator.service';\nimport type { Optional } from '../../types';\nimport { UserRegisterDto } from '../auth/dto/UserRegisterDto';\nimport { CreateSettingsCommand } from './commands/create-settings.command';\nimport { CreateSettingsDto } from './dto/create-settings.dto';\nimport type { UserDto } from './dto/user.dto';\nimport type { UsersPageOptionsDto } from './dto/users-page-options.dto';\nimport type { UserEntity } from './user.entity';\nimport { UserRepository } from './user.repository';\nimport type { UserSettingsEntity } from './user-settings.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    private userRepository: UserRepository,\n    private validatorService: ValidatorService,\n    private awsS3Service: AwsS3Service,\n    private commandBus: CommandBus,\n  ) {}\n\n  /**\n   * Find single user\n   */\n  findOne(findData: FindConditions<UserEntity>): Promise<Optional<UserEntity>> {\n    return this.userRepository.findOne(findData);\n  }\n\n  async findByUsernameOrEmail(\n    options: Partial<{ username: string; email: string }>,\n  ): Promise<Optional<UserEntity>> {\n    const queryBuilder = this.userRepository.createQueryBuilder('user');\n\n    if (options.email) {\n      queryBuilder.orWhere('user.email = :email', {\n        email: options.email,\n      });\n    }\n\n    if (options.username) {\n      queryBuilder.orWhere('user.username = :username', {\n        username: options.username,\n      });\n    }\n\n    return queryBuilder.getOne();\n  }\n\n  @Transactional()\n  async createUser(\n    userRegisterDto: UserRegisterDto,\n    file: IFile,\n  ): Promise<UserEntity> {\n    const user = this.userRepository.create(userRegisterDto);\n\n    if (file && !this.validatorService.isImage(file.mimetype)) {\n      throw new FileNotImageException();\n    }\n\n    if (file) {\n      user.avatar = await this.awsS3Service.uploadImage(file);\n    }\n\n    await this.userRepository.save(user);\n\n    user.settings = await this.createSettings(\n      user.id,\n      plainToClass(CreateSettingsDto, {\n        isEmailVerified: false,\n        isPhoneVerified: false,\n      }),\n    );\n\n    return user;\n  }\n\n  async getUsers(\n    pageOptionsDto: UsersPageOptionsDto,\n  ): Promise<PageDto<UserDto>> {\n    const queryBuilder = this.userRepository.createQueryBuilder('user');\n    const [items, pageMetaDto] = await queryBuilder.paginate(pageOptionsDto);\n\n    return items.toPageDto(pageMetaDto);\n  }\n\n  async getUser(userId: string): Promise<UserDto> {\n    const queryBuilder = this.userRepository.createQueryBuilder('user');\n\n    queryBuilder.where('user.id = :userId', { userId });\n\n    const userEntity = await queryBuilder.getOne();\n\n    if (!userEntity) {\n      throw new UserNotFoundException();\n    }\n\n    return userEntity.toDto();\n  }\n\n  async createSettings(\n    userId: string,\n    createSettingsDto: CreateSettingsDto,\n  ): Promise<UserSettingsEntity> {\n    return this.commandBus.execute<CreateSettingsCommand, UserSettingsEntity>(\n      new CreateSettingsCommand(userId, createSettingsDto),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userRepository",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validatorService",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "awsS3Service",
                        "type": "AwsS3Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commandBus",
                        "type": "CommandBus",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "userRepository",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorService",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "awsS3Service",
                        "type": "AwsS3Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commandBus",
                        "type": "CommandBus",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ValidatorService",
            "id": "injectable-ValidatorService-4d85f007ba5c0b95cdca54efd65152458f2b3d69c770c651561944d15edf2a7532b3e9a318c29c7ccd136ce2cc24746619ac35498e900fd2b8517271bf14db7a",
            "file": "src/shared/services/validator.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isImage",
                    "args": [
                        {
                            "name": "mimeType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "mimeType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ValidatorService {\n  public isImage(mimeType: string): boolean {\n    const imageMimeTypes = ['image/jpeg', 'image/png'];\n\n    return imageMimeTypes.includes(mimeType);\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "RolesGuard",
            "id": "injectable-RolesGuard-0062cdce55f5e2b0fcdd7e540530632feb2963016f249481a2aeeedc1e2cb19ba682d150b0a1c6b7eb90bed5a513b71b11bf5c04a0ae4aa740f10d7ef58c18d0",
            "file": "src/guards/roles.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import type { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport _ from 'lodash';\n\nimport type { RoleType } from '../constants';\nimport type { UserEntity } from '../modules/user/user.entity';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get<RoleType[]>('roles', context.getHandler());\n\n    if (_.isEmpty(roles)) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const user = <UserEntity>request.user;\n\n    return roles.includes(user.role);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AbstractClientService",
            "id": "class-AbstractClientService-c90188a7b605b7bc9481565d61c292e020549136bbfc02ba5bfef86c3695d9afa71b357b84b573ae546b235fe1d935bb33572e1d41df58d7d53e141ee9d37eb8",
            "file": "src/common/abstract-client.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ClientProxy, RpcException } from '@nestjs/microservices';\nimport { plainToInstance } from 'class-transformer';\nimport { catchError, firstValueFrom } from 'rxjs';\n\nimport type { Constructor } from '../types';\nimport { PageDto } from './dto/page.dto';\nimport { PageTypeException } from '../exceptions/page-type.exception';\n\nexport class AbstractClientService<ActionType> {\n  constructor(private client: ClientProxy) {}\n\n  public async send<R, I>(\n    pattern: ActionType,\n    data: I,\n    returnDataOptions: { class: Constructor<R>; isPage: true },\n    isType?: false,\n  ): Promise<PageDto<R>>;\n\n  public async send<R, I>(\n    pattern: ActionType,\n    data: I,\n    returnDataOptions:\n      | { class: Constructor<R>; isPage?: false }\n      | { isPage?: false; isType: true },\n  ): Promise<R>;\n\n  public async send<R, I>(pattern: ActionType, data: I): Promise<void>;\n\n  public async send<R, I>(\n    pattern: ActionType,\n    data: I,\n    returnDataOptions?: Partial<{\n      class?: Constructor<R>;\n      isPage?: boolean;\n      isType?: boolean;\n    }>,\n  ): Promise<R | PageDto<R> | void> {\n    const returnData = await firstValueFrom(this.client.send(pattern, data).pipe(catchError((err) => {\n      throw new RpcException(err);\n    })), {\n      defaultValue: undefined,\n    });\n\n    if (returnDataOptions?.isPage && (!returnData.data || !returnData.meta)) {\n      throw new PageTypeException();\n    }\n\n    if (\n      !returnDataOptions?.class ||\n      returnDataOptions?.isType ||\n      returnDataOptions?.isPage\n    ) {\n      return returnData;\n    }\n\n    return plainToInstance(returnDataOptions.class, returnData);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "client",
                        "type": "ClientProxy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "client",
                        "type": "ClientProxy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "pattern",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "I",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "returnDataOptions",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PageDto<R>>",
                    "typeParameters": [
                        "R",
                        "I"
                    ],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "pattern",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "I",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "returnDataOptions",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "pattern",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "I",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "returnDataOptions",
                            "type": "literal type | literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<R>",
                    "typeParameters": [
                        "R",
                        "I"
                    ],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "pattern",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "I",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "returnDataOptions",
                            "type": "literal type | literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "pattern",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "I",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [
                        "R",
                        "I"
                    ],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "pattern",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "I",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "send",
                    "args": [
                        {
                            "name": "pattern",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "I",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "returnDataOptions",
                            "type": "Partial<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<R | PageDto | void>",
                    "typeParameters": [
                        "R",
                        "I"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "pattern",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "I",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "returnDataOptions",
                            "type": "Partial<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractDto",
            "id": "class-AbstractDto-f9f5403fcdf610fbf653e6f0f71d774bacc6964af9b9cdd060bc371a68899e74261023db57edfeeedbad4a38c06f4e0df98e4bb6bff2ab840d4369c374bb5bde",
            "file": "src/common/dto/abstract.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\n\nimport type { AbstractEntity } from '../abstract.entity';\n\nexport class AbstractDto {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  constructor(entity: AbstractEntity) {\n    this.id = entity.id;\n    this.createdAt = entity.createdAt;\n    this.updatedAt = entity.updatedAt;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "AbstractEntity",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "AbstractEntity",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractEntity",
            "id": "class-AbstractEntity-43fc5094dedba2fe72603430829f1bd87af60b95a67bf87f9cb787bc551bc02fb29ed12bd9cf6b5fe468a731fa74f4cf4835693acf143ddc41d9162093be1d7d",
            "file": "src/common/abstract.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  CreateDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport type { Constructor } from '../types';\nimport type { AbstractDto } from './dto/abstract.dto';\n\n/**\n * Abstract Entity\n * @author Narek Hakobyan <narek.hakobyan.07@gmail.com>\n *\n * @description This class is an abstract class for all entities.\n * It's experimental and recommended using it only in microservice architecture,\n * otherwise just delete and use your own entity.\n */\nexport interface IAbstractEntity<DTO extends AbstractDto, O = never> {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n\n  toDto(options?: O): DTO;\n}\n\nexport abstract class AbstractEntity<\n  DTO extends AbstractDto = AbstractDto,\n  O = never,\n> implements IAbstractEntity<DTO, O>\n{\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n  })\n  createdAt: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n  })\n  updatedAt: Date;\n\n  private dtoClass: Constructor<DTO, [AbstractEntity, O?]>;\n\n  toDto(options?: O): DTO {\n    const dtoClass = this.dtoClass;\n\n    if (!dtoClass) {\n      throw new Error(\n        `You need to use @UseDto on class (${this.constructor.name}) be able to call toDto function`,\n      );\n    }\n\n    return new this.dtoClass(this, options);\n  }\n}\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "CreateDateColumn",
                            "stringifiedArguments": "{type: 'timestamp'}"
                        }
                    ]
                },
                {
                    "name": "dtoClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Constructor<DTO | >",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "PrimaryGeneratedColumn",
                            "stringifiedArguments": "'uuid'"
                        }
                    ]
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "UpdateDateColumn",
                            "stringifiedArguments": "{type: 'timestamp'}"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "toDto",
                    "args": [
                        {
                            "name": "options",
                            "type": "O",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DTO",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "O",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IAbstractEntity"
            ]
        },
        {
            "name": "AddUserSettings1639940635548",
            "id": "class-AddUserSettings1639940635548-c0609960fbfeb153e8ee0dc3a11dd232380fa11adaa5bb1c6d35474bc4a4034deba65fd82324a0856a52fd4be06f14333ab775f7102c90d7d8dd6af9a99f1d5e",
            "file": "src/database/migrations/1639940635548-add-user-settings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddUserSettings1639940635548 implements MigrationInterface {\n  name = 'addUserSettings1639940635548';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(`\n      CREATE TABLE \"user_settings\"\n      (\n        \"id\"                uuid      NOT NULL DEFAULT uuid_generate_v4(),\n        \"created_at\"        TIMESTAMP NOT NULL DEFAULT now(),\n        \"updated_at\"        TIMESTAMP NOT NULL DEFAULT now(),\n        \"is_email_verified\" boolean   NOT NULL DEFAULT false,\n        \"is_phone_verified\" boolean   NOT NULL DEFAULT false,\n        \"user_id\"           uuid      NOT NULL,\n        CONSTRAINT \"REL_19f4e08665a1f4bbbb7d5631f3\" UNIQUE (\"user_id\"),\n        CONSTRAINT \"PK_0fbe28c9f064a04d90aca6b3514\" PRIMARY KEY (\"id\")\n      )`);\n    await queryRunner.query(`ALTER TABLE \"user_settings\"\n      ADD CONSTRAINT \"FK_19f4e08665a1f4bbbb7d5631f35\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(`ALTER TABLE \"user_settings\"\n      DROP CONSTRAINT \"FK_19f4e08665a1f4bbbb7d5631f35\"`);\n    await queryRunner.query('DROP TABLE \"user_settings\"');\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "defaultValue": "'addUserSettings1639940635548'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "down",
                    "args": [
                        {
                            "name": "queryRunner",
                            "type": "QueryRunner",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryRunner",
                            "type": "QueryRunner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "up",
                    "args": [
                        {
                            "name": "queryRunner",
                            "type": "QueryRunner",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryRunner",
                            "type": "QueryRunner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "MigrationInterface"
            ]
        },
        {
            "name": "ContextProvider",
            "id": "class-ContextProvider-8fc0cda6daefdaf5d9bf3a271f5c8e264cf7c566c74dd0b91844ee36fa068868bc5956f6c1f8a6610c560ba0d0cb7740cec73b9feb3e7f74656a44fb30fa6e78",
            "file": "src/providers/context.provider.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import requestContext from 'request-context';\n\nimport type { UserEntity } from '../modules/user/user.entity';\n\nexport class ContextProvider {\n  private static readonly nameSpace = 'request';\n\n  private static readonly authUserKey = 'user_key';\n\n  private static readonly languageKey = 'language_key';\n\n  private static get<T>(key: string): T {\n    return requestContext.get(ContextProvider.getKeyWithNamespace(key));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private static set(key: string, value: any): void {\n    requestContext.set(ContextProvider.getKeyWithNamespace(key), value);\n  }\n\n  private static getKeyWithNamespace(key: string): string {\n    return `${ContextProvider.nameSpace}.${key}`;\n  }\n\n  static setAuthUser(user: UserEntity): void {\n    ContextProvider.set(ContextProvider.authUserKey, user);\n  }\n\n  static setLanguage(language: string): void {\n    ContextProvider.set(ContextProvider.languageKey, language);\n  }\n\n  static getLanguage(): string {\n    return ContextProvider.get(ContextProvider.languageKey);\n  }\n\n  static getAuthUser(): UserEntity {\n    return ContextProvider.get(ContextProvider.authUserKey);\n  }\n}\n",
            "properties": [
                {
                    "name": "authUserKey",
                    "defaultValue": "'user_key'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "languageKey",
                    "defaultValue": "'language_key'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "nameSpace",
                    "defaultValue": "'request'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthUser",
                    "args": [],
                    "optional": false,
                    "returnType": "UserEntity",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getKeyWithNamespace",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAuthUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserEntity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserEntity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateSettingsCommand",
            "id": "class-CreateSettingsCommand-650b1d4f7e12dc48f7dc634dbee9eaba846fefa6e26c531a24e8e4a5fd1d53bb4115affd5d24d7df111f74aa50ad68503cb9d9cea65e939c1c1ae2f17cfcb93a",
            "file": "src/modules/user/commands/create-settings.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ICommand, ICommandHandler } from '@nestjs/cqrs';\nimport { CommandHandler } from '@nestjs/cqrs';\n\nimport type { CreateSettingsDto } from '../dto/create-settings.dto';\nimport type { UserSettingsEntity } from '../user-settings.entity';\nimport { UserSettingsRepository } from '../user-settings.repository';\n\nexport class CreateSettingsCommand implements ICommand {\n  constructor(\n    public readonly userId: string,\n    public readonly createSettingsDto: CreateSettingsDto,\n  ) {}\n}\n\n@CommandHandler(CreateSettingsCommand)\nexport class CreateSettingsHandler\n  implements ICommandHandler<CreateSettingsCommand, UserSettingsEntity>\n{\n  constructor(private userSettingsRepository: UserSettingsRepository) {}\n\n  async execute(command: CreateSettingsCommand) {\n    const { userId, createSettingsDto } = command;\n    const userSettingsEntity =\n      this.userSettingsRepository.create(createSettingsDto);\n\n    userSettingsEntity.userId = userId;\n\n    return this.userSettingsRepository.save(userSettingsEntity);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "createSettingsDto",
                        "type": "CreateSettingsDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "userId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createSettingsDto",
                        "type": "CreateSettingsDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "createSettingsDto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreateSettingsDto",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICommand"
            ]
        },
        {
            "name": "CreateSettingsDto",
            "id": "class-CreateSettingsDto-d5def33190d6ae5236a1791d368d4a84e39abc97a940a939560c663c104e6b07f996b5ff17a86dd0bca9f7585f4734bd7fe660ad4409658b52c044d24ee10e65",
            "file": "src/modules/user/dto/create-settings.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BooleanFieldOptional } from '../../../decorators';\n\nexport class CreateSettingsDto {\n  @BooleanFieldOptional()\n  isEmailVerified: boolean;\n\n  @BooleanFieldOptional()\n  isPhoneVerified: boolean;\n}\n",
            "properties": [
                {
                    "name": "isEmailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "BooleanFieldOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "isPhoneVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "BooleanFieldOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateSettingsHandler",
            "id": "class-CreateSettingsHandler-650b1d4f7e12dc48f7dc634dbee9eaba846fefa6e26c531a24e8e4a5fd1d53bb4115affd5d24d7df111f74aa50ad68503cb9d9cea65e939c1c1ae2f17cfcb93a",
            "file": "src/modules/user/commands/create-settings.command.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ICommand, ICommandHandler } from '@nestjs/cqrs';\nimport { CommandHandler } from '@nestjs/cqrs';\n\nimport type { CreateSettingsDto } from '../dto/create-settings.dto';\nimport type { UserSettingsEntity } from '../user-settings.entity';\nimport { UserSettingsRepository } from '../user-settings.repository';\n\nexport class CreateSettingsCommand implements ICommand {\n  constructor(\n    public readonly userId: string,\n    public readonly createSettingsDto: CreateSettingsDto,\n  ) {}\n}\n\n@CommandHandler(CreateSettingsCommand)\nexport class CreateSettingsHandler\n  implements ICommandHandler<CreateSettingsCommand, UserSettingsEntity>\n{\n  constructor(private userSettingsRepository: UserSettingsRepository) {}\n\n  async execute(command: CreateSettingsCommand) {\n    const { userId, createSettingsDto } = command;\n    const userSettingsEntity =\n      this.userSettingsRepository.create(createSettingsDto);\n\n    userSettingsEntity.userId = userId;\n\n    return this.userSettingsRepository.save(userSettingsEntity);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userSettingsRepository",
                        "type": "UserSettingsRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "userSettingsRepository",
                        "type": "UserSettingsRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "command",
                            "type": "CreateSettingsCommand",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "command",
                            "type": "CreateSettingsCommand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ICommandHandler"
            ]
        },
        {
            "name": "CreateUsers",
            "id": "class-CreateUsers-f6a02f4ba38a50a8a2a39095b8650aa87cde20d2ca45146891d0ecd1b2663be98aaec6704ce594555702de6d473edea5c55f24779a0e26fcb1d67b06ed1fcaab",
            "file": "src/database/seeds/users.seed.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { Factory, Seeder } from 'typeorm-seeding';\n\nimport { UserEntity } from '../../modules/user/user.entity';\n\nexport default class CreateUsers implements Seeder {\n  public async run(factory: Factory): Promise<void> {\n    await factory(UserEntity)({ roles: [] }).createMany(1);\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "factory",
                            "type": "Factory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "factory",
                            "type": "Factory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Seeder"
            ]
        },
        {
            "name": "CreateUsersTable1622299665807",
            "id": "class-CreateUsersTable1622299665807-cdef1858b76394cf4eb179dfb8e34ed9eaeb3eaffbb53854c4f675e669233e162dc158f659f3984ef5385dfb657e92e32b4c2d0e7be18780bda2ab97cf265802",
            "file": "src/database/migrations/1622299665807-create-users-table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateUsersTable1622299665807 implements MigrationInterface {\n  name = 'createUsersTable1622299665807';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query(\n      \"CREATE TYPE \\\"users_role_enum\\\" AS ENUM('USER', 'ADMIN')\",\n    );\n    await queryRunner.query(`\n      CREATE TABLE \"users\"\n      (\n        \"id\"         uuid              NOT NULL DEFAULT uuid_generate_v4(),\n        \"created_at\" TIMESTAMP         NOT NULL DEFAULT now(),\n        \"updated_at\" TIMESTAMP         NOT NULL DEFAULT now(),\n        \"first_name\" character varying,\n        \"last_name\"  character varying,\n        \"role\"       \"users_role_enum\" NOT NULL DEFAULT 'USER',\n        \"email\"      character varying,\n        \"password\"   character varying,\n        \"phone\"      character varying,\n        \"avatar\"     character varying,\n        CONSTRAINT \"UQ_97672ac88f789774dd47f7c8be3\" UNIQUE (\"email\"),\n        CONSTRAINT \"PK_a3ffb1c0c8416b9fc6f907b7433\" PRIMARY KEY (\"id\")\n      )`);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.query('DROP TABLE \"users\"');\n    await queryRunner.query('DROP TYPE \"users_role_enum\"');\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "defaultValue": "'createUsersTable1622299665807'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "down",
                    "args": [
                        {
                            "name": "queryRunner",
                            "type": "QueryRunner",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryRunner",
                            "type": "QueryRunner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "up",
                    "args": [
                        {
                            "name": "queryRunner",
                            "type": "QueryRunner",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryRunner",
                            "type": "QueryRunner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "MigrationInterface"
            ]
        },
        {
            "name": "FileNotImageException",
            "id": "class-FileNotImageException-e32fffec811c8aec9ec738cb5311bd2100413cbd88f6aff8c34b3c6e8be1d5932c84c120511cd581635235bfba504b2a945be67240844b97dd0e6dfa31de0751",
            "file": "src/exceptions/file-not-image.exception.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BadRequestException } from '@nestjs/common';\n\nexport class FileNotImageException extends BadRequestException {\n  constructor(error?: string) {\n    super('error.file.not_image', error);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "BadRequestException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GeneratorProvider",
            "id": "class-GeneratorProvider-53cfb5351a6efec8bb018202975b2fb01f7bc4563d72c778e24e2fb99a751ceafa50f91eab6b0c13b0546fac93363b33e09bf465e83f3d1d59e27784644c6646",
            "file": "src/providers/generator.provider.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { v1 as uuid } from 'uuid';\n\nimport type { Optional } from '../types';\n\nexport class GeneratorProvider {\n  static uuid(): string {\n    return uuid();\n  }\n\n  static fileName(ext: string): string {\n    return GeneratorProvider.uuid() + '.' + ext;\n  }\n\n  static getS3PublicUrl(key: string): Optional<string> {\n    if (!key) {\n      return;\n    }\n\n    return `https://s3.${process.env.AWS_S3_BUCKET_NAME_REGION}.amazonaws.com/${process.env.AWS_S3_BUCKET_NAME}/${key}`;\n  }\n\n  static getS3Key(publicUrl: string): Optional<string> {\n    if (!publicUrl) {\n      return;\n    }\n\n    const exec = new RegExp(\n      `(?<=https://s3.${process.env.AWS_S3_BUCKET_NAME_REGION}.amazonaws.com/${process.env.AWS_S3_BUCKET_NAME}/).*`,\n    ).exec(publicUrl);\n\n    return exec?.[0];\n  }\n\n  static generateVerificationCode(): string {\n    return Math.floor(1000 + Math.random() * 9000).toString();\n  }\n\n  static generatePassword(): string {\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n    const uppercase = lowercase.toUpperCase();\n    const numbers = '0123456789';\n\n    let text = '';\n\n    for (let i = 0; i < 4; i++) {\n      text += uppercase.charAt(Math.floor(Math.random() * uppercase.length));\n      text += lowercase.charAt(Math.floor(Math.random() * lowercase.length));\n      text += numbers.charAt(Math.floor(Math.random() * numbers.length));\n    }\n\n    return text;\n  }\n\n  /**\n   * generate random string\n   * @param length\n   */\n  static generateRandomString(length: number): string {\n    return Math.random()\n      .toString(36)\n      .replace(/[^\\dA-Za-z]+/g, '')\n      .slice(0, Math.max(0, length));\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "fileName",
                    "args": [
                        {
                            "name": "ext",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "ext",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "generateRandomString",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngenerate random string\n",
                    "description": "<p>generate random string</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1419,
                                "end": 1425,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "length"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1413,
                                "end": 1418,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "generateVerificationCode",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getS3Key",
                    "args": [
                        {
                            "name": "publicUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Optional<string>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "publicUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getS3PublicUrl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Optional<string>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uuid",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpExceptionFilter",
            "id": "class-HttpExceptionFilter-30af12de5debc8f3ae524fac718886863143dd8d2674b84735519fb6c1394fff32502613142ad47c3a9c2d50cd5ba51188bfb69907ec2452edacbbe3adf8f0f5",
            "file": "src/filters/bad-request.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ArgumentsHost, ExceptionFilter } from '@nestjs/common';\nimport { Catch, UnprocessableEntityException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport type { ValidationError } from 'class-validator';\nimport type { Response } from 'express';\nimport _ from 'lodash';\n\n@Catch(UnprocessableEntityException)\nexport class HttpExceptionFilter\n  implements ExceptionFilter<UnprocessableEntityException>\n{\n  constructor(public reflector: Reflector) {}\n\n  catch(exception: UnprocessableEntityException, host: ArgumentsHost): void {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n    const statusCode = exception.getStatus();\n    const r = exception.getResponse() as { message: ValidationError[] };\n\n    const validationErrors = r.message;\n    this.validationFilter(validationErrors);\n\n    response.status(statusCode).json(r);\n  }\n\n  private validationFilter(validationErrors: ValidationError[]): void {\n    for (const validationError of validationErrors) {\n      const children = validationError.children;\n\n      if (children && !_.isEmpty(children)) {\n        this.validationFilter(children);\n\n        return;\n      }\n\n      delete validationError.children;\n\n      const constraints = validationError.constraints;\n\n      if (!constraints) {\n        return;\n      }\n\n      for (const [constraintKey, constraint] of Object.entries(constraints)) {\n        // convert default messages\n        if (!constraint) {\n          // convert error message to error.fields.{key} syntax for i18n translation\n          constraints[constraintKey] = `error.fields.${_.snakeCase(\n            constraintKey,\n          )}`;\n        }\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "reflector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Reflector",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "catch",
                    "args": [
                        {
                            "name": "exception",
                            "type": "UnprocessableEntityException",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "host",
                            "type": "ArgumentsHost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "exception",
                            "type": "UnprocessableEntityException",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "host",
                            "type": "ArgumentsHost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validationFilter",
                    "args": [
                        {
                            "name": "validationErrors",
                            "type": "ValidationError[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "validationErrors",
                            "type": "ValidationError[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ExceptionFilter"
            ]
        },
        {
            "name": "LoginPayloadDto",
            "id": "class-LoginPayloadDto-d54e02d07278aa8d7b0158e0c7806236f589b5570d2677ea7fb263e77eecc9fa6cbc34e03c15c43ec961c5154cc5bbefc40c254a094602a8508d374bb4a51cc2",
            "file": "src/modules/auth/dto/LoginPayloadDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\n\nimport { UserDto } from '../../user/dto/user.dto';\nimport { TokenPayloadDto } from './TokenPayloadDto';\n\nexport class LoginPayloadDto {\n  @ApiProperty({ type: UserDto })\n  user: UserDto;\n\n  @ApiProperty({ type: TokenPayloadDto })\n  token: TokenPayloadDto;\n\n  constructor(user: UserDto, token: TokenPayloadDto) {\n    this.user = user;\n    this.token = token;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "user",
                        "type": "UserDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "token",
                        "type": "TokenPayloadDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "UserDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "token",
                        "type": "TokenPayloadDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TokenPayloadDto",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: TokenPayloadDto}"
                        }
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserDto",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: UserDto}"
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PageDto",
            "id": "class-PageDto-47aad347059d4c905421d6abf5c09281dddae1dd6ad35754f92ac82088304694387ba44b849e125f02c423b12e0103bdad3ee49085407cb205d684b04fc407f8",
            "file": "src/common/dto/page.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\n\nimport { PageMetaDto } from './page-meta.dto';\n\nexport class PageDto<T> {\n  @ApiProperty({ isArray: true })\n  readonly data: T[];\n\n  @ApiProperty()\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "T[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "meta",
                        "type": "PageMetaDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "T[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "meta",
                        "type": "PageMetaDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{isArray: true}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PageMetaDto",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PageMetaDto",
            "id": "class-PageMetaDto-37d9367d9486ec2e0ed860278ca10bde13189907f95ab8932e6177e41d2d6fe2c2d82d741a1874a9b2788313dc68737593e73c91082ef2dbd02a5c7be546bd70",
            "file": "src/common/dto/page-meta.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\n\nimport type { PageOptionsDto } from './page-options.dto';\n\ninterface IPageMetaDtoParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\nexport class PageMetaDto {\n  @ApiProperty()\n  readonly page: number;\n\n  @ApiProperty()\n  readonly take: number;\n\n  @ApiProperty()\n  readonly itemCount: number;\n\n  @ApiProperty()\n  readonly pageCount: number;\n\n  @ApiProperty()\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty()\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: IPageMetaDtoParameters) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page < this.pageCount;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "IPageMetaDtoParameters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "type": "IPageMetaDtoParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "hasNextPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "hasPreviousPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "itemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "pageCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "take",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PageOptionsDto",
            "id": "class-PageOptionsDto-7ee5df596a9c03b8ae68b9a1e0e1e1c5a7572226a06fdb65a504f815d5020e477da2708a752af78b209ab7caeda20b9f10c841378916f4fc5b024c3a28f68450",
            "file": "src/common/dto/page-options.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Order } from '../../constants';\nimport {\n  EnumFieldOptional,\n  NumberFieldOptional,\n  StringFieldOptional,\n} from '../../decorators';\n\nexport class PageOptionsDto {\n  @EnumFieldOptional(() => Order, {\n    default: Order.ASC,\n  })\n  readonly order: Order = Order.ASC;\n\n  @NumberFieldOptional({\n    minimum: 1,\n    default: 1,\n    int: true,\n  })\n  readonly page: number = 1;\n\n  @NumberFieldOptional({\n    minimum: 1,\n    maximum: 50,\n    default: 10,\n    int: true,\n  })\n  readonly take: number = 10;\n\n  get skip(): number {\n    return (this.page - 1) * this.take;\n  }\n\n  @StringFieldOptional()\n  readonly q?: string;\n}\n",
            "properties": [
                {
                    "name": "order",
                    "defaultValue": "Order.ASC",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Order",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "EnumFieldOptional",
                            "stringifiedArguments": "undefined, {default: undefined}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "NumberFieldOptional",
                            "stringifiedArguments": "{minimum: 1, default: 1, int: true}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "q",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "StringFieldOptional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "take",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "NumberFieldOptional",
                            "stringifiedArguments": "{minimum: 1, maximum: 50, default: 10, int: true}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "skip": {
                    "name": "skip",
                    "getSignature": {
                        "name": "skip",
                        "type": "number",
                        "returnType": "number",
                        "line": 29
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PageTypeException",
            "id": "class-PageTypeException-0245dd8e93d4d57c9f59e3e08de0722f34f0658e31a0ba9a2188ff9a8bc8e21ef4003f5dd2e5f000e226b0d6f870e0c5b5aa9812c7797dcd8d78709d46739a38",
            "file": "src/exceptions/page-type.exception.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BadRequestException } from '@nestjs/common';\n\nexport class PageTypeException extends BadRequestException {\n  constructor() {\n    super('error.pageType');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 3
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "BadRequestException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QueryFailedFilter",
            "id": "class-QueryFailedFilter-ac9787a9540eb173014a2a60050312739da72b9e3b804a4e5b7e801d8633c551d98628b9a75a44d6211c35ca496504efe8c64b51e0e445d42b2e95ff11fe0fc4",
            "file": "src/filters/query-failed.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ArgumentsHost, ExceptionFilter } from '@nestjs/common';\nimport { Catch, HttpStatus } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport type { Response } from 'express';\nimport { STATUS_CODES } from 'http';\nimport { QueryFailedError } from 'typeorm';\n\nimport { constraintErrors } from './constraint-errors';\n\n@Catch(QueryFailedError)\nexport class QueryFailedFilter implements ExceptionFilter<QueryFailedError> {\n  constructor(public reflector: Reflector) {}\n\n  catch(\n    exception: QueryFailedError & { constraint?: string },\n    host: ArgumentsHost,\n  ) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n\n    const status = exception.constraint?.startsWith('UQ')\n      ? HttpStatus.CONFLICT\n      : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    response.status(status).json({\n      statusCode: status,\n      error: STATUS_CODES[status],\n      message: exception.constraint\n        ? constraintErrors[exception.constraint]\n        : undefined,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "reflector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Reflector",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "catch",
                    "args": [
                        {
                            "name": "exception",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "host",
                            "type": "ArgumentsHost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "exception",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "host",
                            "type": "ArgumentsHost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ExceptionFilter"
            ]
        },
        {
            "name": "SnakeNamingStrategy",
            "id": "class-SnakeNamingStrategy-5959a7c61dba7c76b2fcef6f365479161b6a2f805d63c0aaf6c0babf980741360dd5fa5c3d013a517024324cd38ee9dd649e43a932d6c9e59d5f2b0e48181694",
            "file": "src/snake-naming.strategy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { NamingStrategyInterface } from 'typeorm';\nimport { DefaultNamingStrategy } from 'typeorm';\nimport { snakeCase } from 'typeorm/util/StringUtils';\n\nexport class SnakeNamingStrategy\n  extends DefaultNamingStrategy\n  implements NamingStrategyInterface\n{\n  tableName(className: string, customName: string): string {\n    return customName ? customName : snakeCase(className);\n  }\n\n  columnName(\n    propertyName: string,\n    customName: string,\n    embeddedPrefixes: string[],\n  ): string {\n    return (\n      snakeCase(embeddedPrefixes.join('_')) +\n      (customName ? customName : snakeCase(propertyName))\n    );\n  }\n\n  relationName(propertyName: string): string {\n    return snakeCase(propertyName);\n  }\n\n  joinColumnName(relationName: string, referencedColumnName: string): string {\n    return snakeCase(relationName + '_' + referencedColumnName);\n  }\n\n  joinTableName(\n    firstTableName: string,\n    secondTableName: string,\n    firstPropertyName: string,\n    _secondPropertyName: string,\n  ): string {\n    return snakeCase(\n      firstTableName +\n        '_' +\n        firstPropertyName.replace(/\\./gi, '_') +\n        '_' +\n        secondTableName,\n    );\n  }\n\n  joinTableColumnName(\n    tableName: string,\n    propertyName: string,\n    columnName?: string,\n  ): string {\n    return snakeCase(\n      tableName + '_' + (columnName ? columnName : propertyName),\n    );\n  }\n\n  classTableInheritanceParentColumnName(\n    parentTableName: string,\n    parentTableIdPropertyName: string,\n  ): string {\n    return snakeCase(`${parentTableName}_${parentTableIdPropertyName}`);\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "classTableInheritanceParentColumnName",
                    "args": [
                        {
                            "name": "parentTableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentTableIdPropertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parentTableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentTableIdPropertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "columnName",
                    "args": [
                        {
                            "name": "propertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "embeddedPrefixes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "propertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "customName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "embeddedPrefixes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "joinColumnName",
                    "args": [
                        {
                            "name": "relationName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "referencedColumnName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "relationName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referencedColumnName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "joinTableColumnName",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columnName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "joinTableName",
                    "args": [
                        {
                            "name": "firstTableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "secondTableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstPropertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_secondPropertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "firstTableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondTableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstPropertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_secondPropertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "relationName",
                    "args": [
                        {
                            "name": "propertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "propertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tableName",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "customName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "customName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "DefaultNamingStrategy",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "NamingStrategyInterface"
            ]
        },
        {
            "name": "TokenPayloadDto",
            "id": "class-TokenPayloadDto-e074c5e7949e19758816e7fc34af27623de46fc9ad5b7bf20fc5fbb8f73469f3160d2b4f0224e529bc3e14550cf05eadd4200c1ffbeda29242a9792ace712c4f",
            "file": "src/modules/auth/dto/TokenPayloadDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\n\nexport class TokenPayloadDto {\n  @ApiProperty()\n  expiresIn: number;\n\n  @ApiProperty()\n  accessToken: string;\n\n  constructor(data: { expiresIn: number; accessToken: string }) {\n    this.expiresIn = data.expiresIn;\n    this.accessToken = data.accessToken;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "expiresIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserDto",
            "id": "class-UserDto-1303bf57dfb4e0006cfd7fe832aad5fca93a41c86ca23304d8a670adeb17366b4d106a916e713a830dcc2e47b7712336ba5403562268c30995e0a914cbf81f6a",
            "file": "src/modules/user/dto/user.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nimport { AbstractDto } from '../../../common/dto/abstract.dto';\nimport { RoleType } from '../../../constants';\nimport type { UserEntity } from '../user.entity';\n\n// TODO, remove this class and use constructor's second argument's type\nexport type UserDtoOptions = Partial<{ isActive: boolean }>;\n\nexport class UserDto extends AbstractDto {\n  @ApiPropertyOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional()\n  lastName?: string;\n\n  @ApiProperty()\n  username: string;\n\n  @ApiPropertyOptional({ enum: RoleType })\n  role: RoleType;\n\n  @ApiPropertyOptional()\n  email?: string;\n\n  @ApiPropertyOptional()\n  avatar?: string;\n\n  @ApiPropertyOptional()\n  phone?: string;\n\n  @ApiPropertyOptional()\n  isActive?: boolean;\n\n  constructor(user: UserEntity, options?: UserDtoOptions) {\n    super(user);\n    this.firstName = user.firstName;\n    this.lastName = user.lastName;\n    this.role = user.role;\n    this.email = user.email;\n    this.avatar = user.avatar;\n    this.phone = user.phone;\n    this.isActive = options?.isActive;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "user",
                        "type": "UserEntity",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "UserDtoOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "UserEntity",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "UserDtoOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ApiPropertyOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ApiPropertyOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ApiPropertyOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ApiPropertyOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ApiPropertyOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ApiPropertyOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoleType",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ApiPropertyOptional",
                            "stringifiedArguments": "{enum: RoleType}"
                        }
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractDto"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractDto"
                    }
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractDto"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "AbstractDto",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserEntity",
            "id": "class-UserEntity-a593637cd59a201540e6a443bf850396a4964228b61f77f41ec4bb05d619b066dec407c7fcaf4030d0d1cd8c745b9d65f37d01722af428ffbeb333c1868412c6",
            "file": "src/modules/user/user.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Column, Entity, OneToOne } from 'typeorm';\n\nimport type { IAbstractEntity } from '../../common/abstract.entity';\nimport { AbstractEntity } from '../../common/abstract.entity';\nimport { RoleType } from '../../constants';\nimport { UseDto, VirtualColumn } from '../../decorators';\nimport type { UserDtoOptions } from './dto/user.dto';\nimport { UserDto } from './dto/user.dto';\nimport type { IUserSettingsEntity } from './user-settings.entity';\nimport { UserSettingsEntity } from './user-settings.entity';\n\nexport interface IUserEntity extends IAbstractEntity<UserDto> {\n  firstName?: string;\n\n  lastName?: string;\n\n  role: RoleType;\n\n  email?: string;\n\n  password?: string;\n\n  phone?: string;\n\n  avatar?: string;\n\n  fullName?: string;\n\n  settings?: IUserSettingsEntity;\n}\n\n@Entity({ name: 'users' })\n@UseDto(UserDto)\nexport class UserEntity\n  extends AbstractEntity<UserDto, UserDtoOptions>\n  implements IUserEntity\n{\n  @Column({ nullable: true })\n  firstName?: string;\n\n  @Column({ nullable: true })\n  lastName?: string;\n\n  @Column({ type: 'enum', enum: RoleType, default: RoleType.USER })\n  role: RoleType;\n\n  @Column({ unique: true, nullable: true })\n  email?: string;\n\n  @Column({ nullable: true })\n  password?: string;\n\n  @Column({ nullable: true })\n  phone?: string;\n\n  @Column({ nullable: true })\n  avatar?: string;\n\n  @VirtualColumn()\n  fullName?: string;\n\n  @OneToOne(() => UserSettingsEntity, (userSettings) => userSettings.user)\n  settings?: UserSettingsEntity;\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{nullable: true}"
                        }
                    ]
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{unique: true, nullable: true}"
                        }
                    ]
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{nullable: true}"
                        }
                    ]
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "VirtualColumn",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{nullable: true}"
                        }
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{nullable: true}"
                        }
                    ]
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{nullable: true}"
                        }
                    ]
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoleType",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{type: 'enum', enum: RoleType, default: undefined}"
                        }
                    ]
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserSettingsEntity",
                    "optional": true,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "OneToOne",
                            "stringifiedArguments": "undefined, userSettings => userSettings.user"
                        }
                    ]
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "CreateDateColumn",
                            "stringifiedArguments": "{type: 'timestamp'}"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                },
                {
                    "name": "dtoClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Constructor<DTO | >",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "PrimaryGeneratedColumn",
                            "stringifiedArguments": "'uuid'"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "UpdateDateColumn",
                            "stringifiedArguments": "{type: 'timestamp'}"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                }
            ],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "toDto",
                    "args": [
                        {
                            "name": "options",
                            "type": "O",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DTO",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "O",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractEntity",
            "implements": [
                "IUserEntity"
            ]
        },
        {
            "name": "UserLoginDto",
            "id": "class-UserLoginDto-c0649edff0282cfbd37307344644f7f0ceb0e9a492c4a0cf3f81ace2ed03d212197c6545f1a938b825bdcc536a60dd2bc55f9e133bf15e9413a7ae5548c993fe",
            "file": "src/modules/auth/dto/UserLoginDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString } from 'class-validator';\n\nexport class UserLoginDto {\n  @IsString()\n  @IsEmail()\n  @ApiProperty()\n  readonly email: string;\n\n  @IsString()\n  @ApiProperty()\n  readonly password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsEmail",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserNotFoundException",
            "id": "class-UserNotFoundException-f4afe2aedb37a5baed7039399daccb73269a58a5e0a578917079f5996d86ed257bc04da244000b32b1f070c23723d23d4e9aa01c41b5dd6282470a5a9e3129e1",
            "file": "src/exceptions/user-not-found.exception.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { NotFoundException } from '@nestjs/common';\n\nexport class UserNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('error.user_not_found', error);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "NotFoundException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserRegisterDto",
            "id": "class-UserRegisterDto-b074f453d9635ba2e35482b6d43240aa15b07f29a96e510901acb679d08f12896815224d44c1b48a5b4ac4e8380fcefd78608fc4eac6a5ff52c90fa7c6c4c1fe",
            "file": "src/modules/auth/dto/UserRegisterDto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { Column } from 'typeorm';\n\nimport { Trim } from '../../../decorators/transform.decorators';\n\nexport class UserRegisterDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Trim()\n  readonly firstName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Trim()\n  readonly lastName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  @Trim()\n  readonly email: string;\n\n  @ApiProperty({ minLength: 6 })\n  @IsString()\n  @MinLength(6)\n  readonly password: string;\n\n  @ApiProperty()\n  @Column()\n  @IsPhoneNumber()\n  @IsOptional()\n  phone: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsEmail",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Trim",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Trim",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Trim",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{minLength: 6}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "MinLength",
                            "stringifiedArguments": "6"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Column",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsPhoneNumber",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsOptional",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserRepository",
            "id": "class-UserRepository-cac7a57ff339175dbee80a283de74306d40e86881efa17a1bba3fa63c0e97f088b4e885869202709cab4b24cff8d58c54d8203e3b393c3aa34a094f810b57377",
            "file": "src/modules/user/user.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { EntityRepository, Repository } from 'typeorm';\n\nimport { UserEntity } from './user.entity';\n\n@EntityRepository(UserEntity)\nexport class UserRepository extends Repository<UserEntity> {}\n",
            "properties": [],
            "rawdescription": "\n",
            "methods": [],
            "indexSignatures": [],
            "extends": "Repository"
        },
        {
            "name": "UserSettingsEntity",
            "id": "class-UserSettingsEntity-8a64742c0b51ce3a908ab00a6e48d0a18928085ff03bf97a0669186ddc705ad3c4649d24715dc7cb1fb4918806b3c23057cfa6c3d48b3a91b6bf08500be8e69b",
            "file": "src/modules/user/user-settings.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Column, Entity, JoinColumn, OneToOne } from 'typeorm';\n\nimport type { IAbstractEntity } from '../../common/abstract.entity';\nimport { AbstractEntity } from '../../common/abstract.entity';\nimport { UseDto } from '../../decorators';\nimport type { UserDtoOptions } from './dto/user.dto';\nimport { UserDto } from './dto/user.dto';\nimport type { IUserEntity } from './user.entity';\nimport { UserEntity } from './user.entity';\n\nexport interface IUserSettingsEntity extends IAbstractEntity<UserDto> {\n  isEmailVerified?: boolean;\n\n  isPhoneVerified?: boolean;\n\n  user?: IUserEntity;\n}\n\n@Entity({ name: 'user_settings' })\n@UseDto(UserDto)\nexport class UserSettingsEntity\n  extends AbstractEntity<UserDto, UserDtoOptions>\n  implements IUserSettingsEntity\n{\n  @Column({ default: false })\n  isEmailVerified?: boolean;\n\n  @Column({ default: false })\n  isPhoneVerified?: boolean;\n\n  @Column({ type: 'uuid' })\n  userId?: string;\n\n  @OneToOne(() => UserEntity, (user) => user.settings)\n  @JoinColumn({ name: 'user_id' })\n  user?: UserEntity;\n}\n",
            "properties": [
                {
                    "name": "isEmailVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{default: false}"
                        }
                    ]
                },
                {
                    "name": "isPhoneVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{default: false}"
                        }
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserEntity",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "OneToOne",
                            "stringifiedArguments": "undefined, user => user.settings"
                        },
                        {
                            "name": "JoinColumn",
                            "stringifiedArguments": "{name: 'user_id'}"
                        }
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Column",
                            "stringifiedArguments": "{type: 'uuid'}"
                        }
                    ]
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "CreateDateColumn",
                            "stringifiedArguments": "{type: 'timestamp'}"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                },
                {
                    "name": "dtoClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Constructor<DTO | >",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "PrimaryGeneratedColumn",
                            "stringifiedArguments": "'uuid'"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "UpdateDateColumn",
                            "stringifiedArguments": "{type: 'timestamp'}"
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                }
            ],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "toDto",
                    "args": [
                        {
                            "name": "options",
                            "type": "O",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DTO",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "O",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractEntity",
            "implements": [
                "IUserSettingsEntity"
            ]
        },
        {
            "name": "UserSettingsRepository",
            "id": "class-UserSettingsRepository-e23f3c6069550af2395d3cf4b8842010a7c3e7c73a7b57e99d75e5631df592979ea967f5964ff3667ef28e9fa7da8b50b968c3d95ed9bcde2558dbd7c7bbc334",
            "file": "src/modules/user/user-settings.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { EntityRepository, Repository } from 'typeorm';\n\nimport { UserSettingsEntity } from './user-settings.entity';\n\n@EntityRepository(UserSettingsEntity)\nexport class UserSettingsRepository extends Repository<UserSettingsEntity> {}\n",
            "properties": [],
            "rawdescription": "\n",
            "methods": [],
            "indexSignatures": [],
            "extends": "Repository"
        },
        {
            "name": "UsersPageOptionsDto",
            "id": "class-UsersPageOptionsDto-b60a0e1096b5efcb9c29b5229ad596eaf37119ba54ac782b475e28567df3a21bd49af14bed0e6575a8cc5c49709a73b51428508ae6d5812de298c349478b4f5e",
            "file": "src/modules/user/dto/users-page-options.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PageOptionsDto } from '../../../common/dto/page-options.dto';\n\nexport class UsersPageOptionsDto extends PageOptionsDto {}\n",
            "properties": [
                {
                    "name": "order",
                    "defaultValue": "Order.ASC",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Order",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "EnumFieldOptional",
                            "stringifiedArguments": "undefined, {default: undefined}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "PageOptionsDto"
                    }
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "NumberFieldOptional",
                            "stringifiedArguments": "{minimum: 1, default: 1, int: true}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "PageOptionsDto"
                    }
                },
                {
                    "name": "q",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "StringFieldOptional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "PageOptionsDto"
                    }
                },
                {
                    "name": "take",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "NumberFieldOptional",
                            "stringifiedArguments": "{minimum: 1, maximum: 50, default: 10, int: true}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "PageOptionsDto"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "PageOptionsDto",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserSubscriber",
            "id": "class-UserSubscriber-471fb2d6511d72a569c4d0275d71cb7322dbf6031cd2781f1e5b5545dfe01ce5a37bffbec7fef4effc207fc1ac57d3f82b5a6bde67c6c69716a9198515a5b1c4",
            "file": "src/entity-subscribers/user-subscriber.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type {\n  EntitySubscriberInterface,\n  InsertEvent,\n  UpdateEvent,\n} from 'typeorm';\nimport { EventSubscriber } from 'typeorm';\n\nimport { generateHash } from '../common/utils';\nimport { UserEntity } from '../modules/user/user.entity';\n\n@EventSubscriber()\nexport class UserSubscriber implements EntitySubscriberInterface<UserEntity> {\n  listenTo(): typeof UserEntity {\n    return UserEntity;\n  }\n\n  beforeInsert(event: InsertEvent<UserEntity>): void {\n    if (event.entity.password) {\n      event.entity.password = generateHash(event.entity.password);\n    }\n  }\n\n  beforeUpdate(event: UpdateEvent<UserEntity>): void {\n    // FIXME check event.databaseEntity.password\n    const entity = event.entity as UserEntity;\n\n    if (entity.password !== event.databaseEntity.password) {\n      entity.password = generateHash(entity.password!);\n    }\n  }\n}\n",
            "properties": [],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "beforeInsert",
                    "args": [
                        {
                            "name": "event",
                            "type": "InsertEvent<UserEntity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "InsertEvent<UserEntity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "beforeUpdate",
                    "args": [
                        {
                            "name": "event",
                            "type": "UpdateEvent<UserEntity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "UpdateEvent<UserEntity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenTo",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "implements": [
                "EntitySubscriberInterface"
            ]
        }
    ],
    "directives": [],
    "components": [],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-c58b235168d0506349c0bc06d81dc7d5dbb4900f090f790d562462985a2c4af3c4ddd16a3683c6d18e5ca2dbbe33e16d1065f05c6d3f096bce8f593209d7be00",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app.module.ts",
            "methods": [
                {
                    "name": "configure",
                    "args": [
                        {
                            "name": "consumer",
                            "type": "MiddlewareConsumer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MiddlewareConsumer | void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "consumer",
                            "type": "MiddlewareConsumer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import './boilerplate.polyfill';\n\nimport type { MiddlewareConsumer, NestModule } from '@nestjs/common';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { I18nJsonParser, I18nModule } from 'nestjs-i18n';\nimport path from 'path';\n\nimport { contextMiddleware } from './middlewares';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { HealthCheckerModule } from './modules/health-checker/health-checker.module';\nimport { PostModule } from './modules/post/post.module';\nimport { UserModule } from './modules/user/user.module';\nimport { ApiConfigService } from './shared/services/api-config.service';\nimport { SharedModule } from './shared/shared.module';\n\n@Module({\n  imports: [\n    AuthModule,\n    UserModule,\n    PostModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: process.env.NODE_ENV === 'test' ? '.test.env' : '.env',\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [SharedModule],\n      useFactory: (configService: ApiConfigService) =>\n        configService.postgresConfig,\n      inject: [ApiConfigService],\n    }),\n    I18nModule.forRootAsync({\n      useFactory: (configService: ApiConfigService) => ({\n        fallbackLanguage: configService.fallbackLanguage,\n        parserOptions: {\n          path: path.join(__dirname, '/i18n/'),\n          watch: configService.isDevelopment,\n        },\n      }),\n      imports: [SharedModule],\n      parser: I18nJsonParser,\n      inject: [ApiConfigService],\n    }),\n    HealthCheckerModule,\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): MiddlewareConsumer | void {\n    consumer.apply(contextMiddleware).forRoutes('*');\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "HealthCheckerModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "UserModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-fde49d6d806f4089c822ec1318e0dde5d46b1f3a9640c75f310aab781fa1268480760f9ec389c8d23a5b737ac457536d5503d2822aec24fbfd6d2640de71f289",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { forwardRef, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { ApiConfigService } from '../../shared/services/api-config.service';\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { PublicStrategy } from './public.strategy';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      useFactory: (configService: ApiConfigService) => ({\n        secretOrPrivateKey: configService.authConfig.jwtSecret,\n        // if you want to use token with expiration date\n        // signOptions: {\n        //     expiresIn: configService.getNumber('JWT_EXPIRATION_TIME'),\n        // },\n      }),\n      inject: [ApiConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, PublicStrategy],\n  exports: [JwtModule, AuthService],\n})\nexport class AuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "JwtStrategy"
                        },
                        {
                            "name": "PublicStrategy"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HealthCheckerModule",
            "id": "module-HealthCheckerModule-32b2017ef41f84dc01b362aef50e7d7b7492aff4894340ae31237c5701f33153f7a851cdd2b9af10069d35cce7c944e4d14a0e9e09c39815055bbdefbf496960",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/health-checker/health-checker.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\nimport { HealthCheckerController } from './health-checker.controller';\nimport { ServiceHealthIndicator } from './health-indicators/service.indicator';\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthCheckerController],\n  providers: [ServiceHealthIndicator],\n})\nexport class HealthCheckerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ServiceHealthIndicator"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostModule",
            "id": "module-PostModule-f17c4dd7f872f9fa4116263e636d8ed579e54abb9a1070ac0394a0d44944dfaf2a6bc5576d10fdfc110e57aa630d6b478a61b57a1823fb2eccbb1a272e4f7f17",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/post/post.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\n\nimport { PostController } from './post.controller';\n\n@Module({\n  controllers: [PostController],\n})\nexport class PostModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-5900e3776737d9e246f88d510064afa0ed2036fec1e992e8dccfa02c952e55e8126c4ab9c88de9b2bda76e0f59ae75f6016b2da33e06e7cc0b534e15358e3ff4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { HttpModule } from '@nestjs/axios';\nimport { Global, Module } from '@nestjs/common';\n\n// import { ClientProxyFactory, Transport } from '@nestjs/microservices';\nimport { ApiConfigService } from './services/api-config.service';\nimport { AwsS3Service } from './services/aws-s3.service';\nimport { GeneratorService } from './services/generator.service';\nimport { TranslationService } from './services/translation.service';\nimport { ValidatorService } from './services/validator.service';\n\nconst providers = [\n  ApiConfigService,\n  ValidatorService,\n  AwsS3Service,\n  GeneratorService,\n  TranslationService,\n  // {\n  //   provide: 'NATS_SERVICE',\n  //   useFactory: (configService: ApiConfigService) => {\n  //     const natsConfig = configService.natsConfig;\n  //     return ClientProxyFactory.create({\n  //       transport: Transport.NATS,\n  //       options: {\n  //         name: 'NATS_SERVICE',\n  //         url: `nats://${natsConfig.host}:${natsConfig.port}`,\n  //       },\n  //     });\n  //   },\n  //   inject: [ApiConfigService],\n  // },\n];\n\n@Global()\n@Module({\n  providers,\n  imports: [HttpModule],\n  exports: [...providers, HttpModule],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiConfigService"
                        },
                        {
                            "name": "AwsS3Service"
                        },
                        {
                            "name": "GeneratorService"
                        },
                        {
                            "name": "TranslationService"
                        },
                        {
                            "name": "ValidatorService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ApiConfigService"
                        },
                        {
                            "name": "AwsS3Service"
                        },
                        {
                            "name": "GeneratorService"
                        },
                        {
                            "name": "TranslationService"
                        },
                        {
                            "name": "ValidatorService"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "id": "module-UserModule-d081af88d467963a70288b3631e2c18317cee583bde8507e5d337d56f552ac52ed583d12220ef58ddd3f43aa22d62fcfdb0b388d51d884cc7d208e1b5bc11f3f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/modules/user/user.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CreateSettingsHandler } from './commands/create-settings.command';\nimport { UserController } from './user.controller';\nimport { UserRepository } from './user.repository';\nimport { UserService } from './user.service';\nimport { UserSettingsRepository } from './user-settings.repository';\n\nexport const handlers = [CreateSettingsHandler];\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository, UserSettingsRepository]),\n    CqrsModule,\n  ],\n  controllers: [UserController],\n  exports: [UserService],\n  providers: [UserService, ...handlers],\n})\nexport class UserModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AuthUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/decorators/auth-user.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user;\n\n    if (user?.[Symbol.for('isPublic')]) {\n      return;\n    }\n\n    return user;\n  },\n)"
            },
            {
                "name": "constraintErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/filters/constraint-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<string, string>",
                "defaultValue": "{\n  UQ_97672ac88f789774dd47f7c8be3: 'error.unique.email',\n}"
            },
            {
                "name": "contextMiddleware",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/middlewares/context.middelware.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "requestContext.middleware('request')"
            },
            {
                "name": "handlers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/modules/user/user.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[CreateSettingsHandler]"
            },
            {
                "name": "providers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ApiConfigService,\n  ValidatorService,\n  AwsS3Service,\n  GeneratorService,\n  TranslationService,\n  // {\n  //   provide: 'NATS_SERVICE',\n  //   useFactory: (configService: ApiConfigService) => {\n  //     const natsConfig = configService.natsConfig;\n  //     return ClientProxyFactory.create({\n  //       transport: Transport.NATS,\n  //       options: {\n  //         name: 'NATS_SERVICE',\n  //         url: `nats://${natsConfig.host}:${natsConfig.port}`,\n  //       },\n  //     });\n  //   },\n  //   inject: [ApiConfigService],\n  // },\n]"
            },
            {
                "name": "PUBLIC_ROUTE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/decorators/public-route.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'public_route'"
            },
            {
                "name": "PublicRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/decorators/public-route.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(isPublic = false): CustomDecorator =>\n  SetMetadata(PUBLIC_ROUTE_KEY, isPublic)"
            },
            {
                "name": "supportedLanguageCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/constants/language-code.enum.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(LanguageCodeEnum).length"
            },
            {
                "name": "TRANSLATION_DECORATOR_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/decorators/translate.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'custom:translate'"
            },
            {
                "name": "VIRTUAL_COLUMN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/decorators/virtual-column.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Symbol('VIRTUAL_COLUMN_KEY')"
            }
        ],
        "functions": [
            {
                "name": "ApiBooleanProperty",
                "file": "src/decorators/property.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "Omit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "Omit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ApiBooleanPropertyOptional",
                "file": "src/decorators/property.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "Omit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "Omit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ApiEnumProperty",
                "file": "src/decorators/property.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "getEnum",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "getEnum",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ApiEnumPropertyOptional",
                "file": "src/decorators/property.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "getEnum",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "getEnum",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ApiFile",
                "file": "src/decorators/swagger.schema.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "files",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "MethodDecorator",
                "jsdoctags": [
                    {
                        "name": "files",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ApiFileDecorator",
                "file": "src/decorators/swagger.schema.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "files",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "options",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "MethodDecorator",
                "jsdoctags": [
                    {
                        "name": "files",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ApiPageOkResponse",
                "file": "src/decorators/api-page-ok-response.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "model",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "MethodDecorator",
                "jsdoctags": [
                    {
                        "name": "model",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ApiUUIDProperty",
                "file": "src/decorators/property.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ApiUUIDPropertyOptional",
                "file": "src/decorators/property.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "Auth",
                "file": "src/decorators/http.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "roles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "options",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "MethodDecorator",
                "jsdoctags": [
                    {
                        "name": "roles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "AuthGuard",
                "file": "src/guards/auth.guard.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Type<IAuthGuard>",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "BooleanField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "BooleanFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "bootstrap",
                "file": "src/main.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Promise<NestExpressApplication>"
            },
            {
                "name": "DateField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "DateFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "EmailField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "EmailFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "EnumField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "getEnum",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "getEnum",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "EnumFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "getEnum",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "getEnum",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "Exists",
                "file": "src/validators/exists.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "constraints",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "constraints",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "explore",
                "file": "src/decorators/swagger.schema.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "instance",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "propertyKey",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "instance",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propertyKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateHash",
                "file": "src/common/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>generate hash from password or string</p>\n",
                "args": [
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 137,
                            "end": 145,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "password"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 122,
                            "end": 127,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "",
                        "typeExpression": {
                            "pos": 128,
                            "end": 136,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 307,
                            "type": {
                                "pos": 129,
                                "end": 135,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 149
                            }
                        }
                    },
                    {
                        "tagName": {
                            "pos": 150,
                            "end": 157,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "",
                        "returnType": "string"
                    }
                ]
            },
            {
                "name": "getVariableName",
                "file": "src/common/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "getVar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "getVar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "IsNullable",
                "file": "src/decorators/validator.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "IsPassword",
                "file": "src/decorators/validator.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "IsPhoneNumber",
                "file": "src/decorators/validator.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "validationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "validationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "IsTmpKey",
                "file": "src/decorators/validator.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "IsUndefinable",
                "file": "src/decorators/validator.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "NumberField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "NumberFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PasswordField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PasswordFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PhoneField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PhoneFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PhoneNumberSerializer",
                "file": "src/decorators/transform.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "PropertyDecorator"
            },
            {
                "name": "RegisterModels",
                "file": "src/decorators/swagger.schema.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "MethodDecorator"
            },
            {
                "name": "S3UrlParser",
                "file": "src/decorators/transform.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "PropertyDecorator"
            },
            {
                "name": "SameAs",
                "file": "src/validators/same-as.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setupSwagger",
                "file": "src/setup-swagger.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "app",
                        "type": "INestApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "app",
                        "type": "INestApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "StringField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "StringFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "TmpKeyField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "TmpKeyFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ToArray",
                "file": "src/decorators/transform.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 1439,
                            "end": 1446,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "example"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "ToBoolean",
                "file": "src/decorators/transform.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "PropertyDecorator"
            },
            {
                "name": "ToInt",
                "file": "src/decorators/transform.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 1064,
                            "end": 1071,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "example"
                        },
                        "comment": ""
                    },
                    {
                        "tagName": {
                            "pos": 1120,
                            "end": 1127,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>PropertyDecorator</p>\n"
                    }
                ]
            },
            {
                "name": "ToLowerCase",
                "file": "src/decorators/transform.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "PropertyDecorator"
            },
            {
                "name": "ToUpperCase",
                "file": "src/decorators/transform.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "PropertyDecorator"
            },
            {
                "name": "Translate",
                "file": "src/decorators/translate.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "ITranslationDecoratorInterface",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "ITranslationDecoratorInterface",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "TranslationsField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "TranslationsFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "Trim",
                "file": "src/decorators/transform.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 312,
                            "end": 319,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "example"
                        },
                        "comment": ""
                    },
                    {
                        "tagName": {
                            "pos": 385,
                            "end": 392,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>PropertyDecorator</p>\n"
                    }
                ]
            },
            {
                "name": "Unique",
                "file": "src/validators/unique.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "constraints",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "constraints",
                        "type": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationOptions",
                        "type": "ValidationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "URLField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "URLFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "UseDto",
                "file": "src/decorators/use-dto.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dtoClass",
                        "type": "Constructor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ClassDecorator",
                "jsdoctags": [
                    {
                        "name": "dtoClass",
                        "type": "Constructor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "UUIDField",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "UUIDFieldOptional",
                "file": "src/decorators/field.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "UUIDParam",
                "file": "src/decorators/http.decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pipes",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "ParameterDecorator",
                "jsdoctags": [
                    {
                        "name": "property",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pipes",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "validateHash",
                "file": "src/common/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>validate text with hash</p>\n",
                "args": [
                    {
                        "name": "password",
                        "type": "Optional",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hash",
                        "type": "Optional",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Promise<boolean>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 321,
                            "end": 329,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "password"
                        },
                        "type": "Optional",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 306,
                            "end": 311,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "",
                        "typeExpression": {
                            "pos": 312,
                            "end": 320,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 307,
                            "type": {
                                "pos": 313,
                                "end": 319,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 149
                            }
                        }
                    },
                    {
                        "name": {
                            "pos": 349,
                            "end": 353,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "hash"
                        },
                        "type": "Optional",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 334,
                            "end": 339,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "",
                        "typeExpression": {
                            "pos": 340,
                            "end": 348,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 307,
                            "type": {
                                "pos": 341,
                                "end": 347,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 149
                            }
                        }
                    },
                    {
                        "tagName": {
                            "pos": 358,
                            "end": 365,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "",
                        "returnType": ""
                    }
                ]
            },
            {
                "name": "VirtualColumn",
                "file": "src/decorators/virtual-column.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "PropertyDecorator",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Constructor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 179
            },
            {
                "name": "ExistsValidationConstraints",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[, ]",
                "file": "src/validators/exists.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Nullable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "T | null",
                "file": "src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Optional",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "T | undefined",
                "file": "src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Plain",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "T",
                "file": "src/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "RequireField",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/decorators/field.decorators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "UniqueValidationConstraints",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[, ]",
                "file": "src/validators/unique.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "UserDtoOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "src/modules/user/dto/user.dto.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "DeviceTypeEnum",
                "childs": [
                    {
                        "name": "IOS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ios"
                    },
                    {
                        "name": "ANDROID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "android"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/constants/device-type.enum.ts"
            },
            {
                "name": "LanguageCodeEnum",
                "childs": [
                    {
                        "name": "EN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EN"
                    },
                    {
                        "name": "RU",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RU"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/constants/language-code.enum.ts"
            },
            {
                "name": "Order",
                "childs": [
                    {
                        "name": "ASC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ASC"
                    },
                    {
                        "name": "DESC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DESC"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/constants/order.ts"
            },
            {
                "name": "RoleType",
                "childs": [
                    {
                        "name": "USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "USER"
                    },
                    {
                        "name": "ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ADMIN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/constants/role-type.ts"
            },
            {
                "name": "TokenType",
                "childs": [
                    {
                        "name": "ACCESS_TOKEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ACCESS_TOKEN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/constants/token-type.ts"
            }
        ],
        "groupedVariables": {
            "src/decorators/auth-user.decorator.ts": [
                {
                    "name": "AuthUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/decorators/auth-user.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user;\n\n    if (user?.[Symbol.for('isPublic')]) {\n      return;\n    }\n\n    return user;\n  },\n)"
                }
            ],
            "src/filters/constraint-errors.ts": [
                {
                    "name": "constraintErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/filters/constraint-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string, string>",
                    "defaultValue": "{\n  UQ_97672ac88f789774dd47f7c8be3: 'error.unique.email',\n}"
                }
            ],
            "src/middlewares/context.middelware.ts": [
                {
                    "name": "contextMiddleware",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/middlewares/context.middelware.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "requestContext.middleware('request')"
                }
            ],
            "src/modules/user/user.module.ts": [
                {
                    "name": "handlers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/modules/user/user.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[CreateSettingsHandler]"
                }
            ],
            "src/shared/shared.module.ts": [
                {
                    "name": "providers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ApiConfigService,\n  ValidatorService,\n  AwsS3Service,\n  GeneratorService,\n  TranslationService,\n  // {\n  //   provide: 'NATS_SERVICE',\n  //   useFactory: (configService: ApiConfigService) => {\n  //     const natsConfig = configService.natsConfig;\n  //     return ClientProxyFactory.create({\n  //       transport: Transport.NATS,\n  //       options: {\n  //         name: 'NATS_SERVICE',\n  //         url: `nats://${natsConfig.host}:${natsConfig.port}`,\n  //       },\n  //     });\n  //   },\n  //   inject: [ApiConfigService],\n  // },\n]"
                }
            ],
            "src/decorators/public-route.decorator.ts": [
                {
                    "name": "PUBLIC_ROUTE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/decorators/public-route.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'public_route'"
                },
                {
                    "name": "PublicRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/decorators/public-route.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(isPublic = false): CustomDecorator =>\n  SetMetadata(PUBLIC_ROUTE_KEY, isPublic)"
                }
            ],
            "src/constants/language-code.enum.ts": [
                {
                    "name": "supportedLanguageCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/constants/language-code.enum.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(LanguageCodeEnum).length"
                }
            ],
            "src/decorators/translate.decorator.ts": [
                {
                    "name": "TRANSLATION_DECORATOR_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/decorators/translate.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'custom:translate'"
                }
            ],
            "src/decorators/virtual-column.decorator.ts": [
                {
                    "name": "VIRTUAL_COLUMN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/decorators/virtual-column.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Symbol('VIRTUAL_COLUMN_KEY')"
                }
            ]
        },
        "groupedFunctions": {
            "src/decorators/property.decorators.ts": [
                {
                    "name": "ApiBooleanProperty",
                    "file": "src/decorators/property.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "type": "Omit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "Omit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ApiBooleanPropertyOptional",
                    "file": "src/decorators/property.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "type": "Omit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "Omit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ApiEnumProperty",
                    "file": "src/decorators/property.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "getEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "getEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ApiEnumPropertyOptional",
                    "file": "src/decorators/property.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "getEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "getEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ApiUUIDProperty",
                    "file": "src/decorators/property.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ApiUUIDPropertyOptional",
                    "file": "src/decorators/property.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/decorators/swagger.schema.ts": [
                {
                    "name": "ApiFile",
                    "file": "src/decorators/swagger.schema.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "files",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "MethodDecorator",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ApiFileDecorator",
                    "file": "src/decorators/swagger.schema.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "files",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "options",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "MethodDecorator",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "explore",
                    "file": "src/decorators/swagger.schema.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "instance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "instance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propertyKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RegisterModels",
                    "file": "src/decorators/swagger.schema.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "MethodDecorator"
                }
            ],
            "src/decorators/api-page-ok-response.decorator.ts": [
                {
                    "name": "ApiPageOkResponse",
                    "file": "src/decorators/api-page-ok-response.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "MethodDecorator",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/decorators/http.decorators.ts": [
                {
                    "name": "Auth",
                    "file": "src/decorators/http.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "roles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "options",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "MethodDecorator",
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UUIDParam",
                    "file": "src/decorators/http.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pipes",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "ParameterDecorator",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pipes",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/guards/auth.guard.ts": [
                {
                    "name": "AuthGuard",
                    "file": "src/guards/auth.guard.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Type<IAuthGuard>",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/decorators/field.decorators.ts": [
                {
                    "name": "BooleanField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "BooleanFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DateField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DateFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "EmailField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "EmailFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "EnumField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "getEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "getEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "EnumFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "getEnum",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "getEnum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "NumberField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "NumberFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "PasswordField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "PasswordFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "PhoneField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "PhoneFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "StringField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "StringFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TmpKeyField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TmpKeyFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TranslationsField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TranslationsFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "URLField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "URLFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UUIDField",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UUIDFieldOptional",
                    "file": "src/decorators/field.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/main.ts": [
                {
                    "name": "bootstrap",
                    "file": "src/main.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Promise<NestExpressApplication>"
                }
            ],
            "src/validators/exists.validator.ts": [
                {
                    "name": "Exists",
                    "file": "src/validators/exists.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "constraints",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "constraints",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/common/utils.ts": [
                {
                    "name": "generateHash",
                    "file": "src/common/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>generate hash from password or string</p>\n",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 137,
                                "end": 145,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "password"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 122,
                                "end": 127,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 128,
                                "end": 136,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 129,
                                    "end": 135,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 150,
                                "end": 157,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": "string"
                        }
                    ]
                },
                {
                    "name": "getVariableName",
                    "file": "src/common/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "getVar",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "getVar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateHash",
                    "file": "src/common/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>validate text with hash</p>\n",
                    "args": [
                        {
                            "name": "password",
                            "type": "Optional",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hash",
                            "type": "Optional",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Promise<boolean>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 321,
                                "end": 329,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "password"
                            },
                            "type": "Optional",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 306,
                                "end": 311,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 312,
                                "end": 320,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 313,
                                    "end": 319,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 349,
                                "end": 353,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hash"
                            },
                            "type": "Optional",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 334,
                                "end": 339,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 340,
                                "end": 348,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 341,
                                    "end": 347,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 358,
                                "end": 365,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": ""
                        }
                    ]
                }
            ],
            "src/decorators/validator.decorators.ts": [
                {
                    "name": "IsNullable",
                    "file": "src/decorators/validator.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "IsPassword",
                    "file": "src/decorators/validator.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "IsPhoneNumber",
                    "file": "src/decorators/validator.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "validationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "validationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "IsTmpKey",
                    "file": "src/decorators/validator.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "IsUndefinable",
                    "file": "src/decorators/validator.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "options",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/decorators/transform.decorators.ts": [
                {
                    "name": "PhoneNumberSerializer",
                    "file": "src/decorators/transform.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "PropertyDecorator"
                },
                {
                    "name": "S3UrlParser",
                    "file": "src/decorators/transform.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "PropertyDecorator"
                },
                {
                    "name": "ToArray",
                    "file": "src/decorators/transform.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1439,
                                "end": 1446,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ToBoolean",
                    "file": "src/decorators/transform.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "PropertyDecorator"
                },
                {
                    "name": "ToInt",
                    "file": "src/decorators/transform.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1064,
                                "end": 1071,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 1120,
                                "end": 1127,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>PropertyDecorator</p>\n"
                        }
                    ]
                },
                {
                    "name": "ToLowerCase",
                    "file": "src/decorators/transform.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "PropertyDecorator"
                },
                {
                    "name": "ToUpperCase",
                    "file": "src/decorators/transform.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "PropertyDecorator"
                },
                {
                    "name": "Trim",
                    "file": "src/decorators/transform.decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 312,
                                "end": 319,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 385,
                                "end": 392,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>PropertyDecorator</p>\n"
                        }
                    ]
                }
            ],
            "src/validators/same-as.validator.ts": [
                {
                    "name": "SameAs",
                    "file": "src/validators/same-as.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/setup-swagger.ts": [
                {
                    "name": "setupSwagger",
                    "file": "src/setup-swagger.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "app",
                            "type": "INestApplication",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "app",
                            "type": "INestApplication",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/decorators/translate.decorator.ts": [
                {
                    "name": "Translate",
                    "file": "src/decorators/translate.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": "ITranslationDecoratorInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ITranslationDecoratorInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/validators/unique.validator.ts": [
                {
                    "name": "Unique",
                    "file": "src/validators/unique.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "constraints",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "constraints",
                            "type": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validationOptions",
                            "type": "ValidationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/decorators/use-dto.decorator.ts": [
                {
                    "name": "UseDto",
                    "file": "src/decorators/use-dto.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dtoClass",
                            "type": "Constructor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ClassDecorator",
                    "jsdoctags": [
                        {
                            "name": "dtoClass",
                            "type": "Constructor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/decorators/virtual-column.decorator.ts": [
                {
                    "name": "VirtualColumn",
                    "file": "src/decorators/virtual-column.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "PropertyDecorator",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/constants/device-type.enum.ts": [
                {
                    "name": "DeviceTypeEnum",
                    "childs": [
                        {
                            "name": "IOS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ios"
                        },
                        {
                            "name": "ANDROID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "android"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/constants/device-type.enum.ts"
                }
            ],
            "src/constants/language-code.enum.ts": [
                {
                    "name": "LanguageCodeEnum",
                    "childs": [
                        {
                            "name": "EN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EN"
                        },
                        {
                            "name": "RU",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RU"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/constants/language-code.enum.ts"
                }
            ],
            "src/constants/order.ts": [
                {
                    "name": "Order",
                    "childs": [
                        {
                            "name": "ASC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ASC"
                        },
                        {
                            "name": "DESC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DESC"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/constants/order.ts"
                }
            ],
            "src/constants/role-type.ts": [
                {
                    "name": "RoleType",
                    "childs": [
                        {
                            "name": "USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "USER"
                        },
                        {
                            "name": "ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ADMIN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/constants/role-type.ts"
                }
            ],
            "src/constants/token-type.ts": [
                {
                    "name": "TokenType",
                    "childs": [
                        {
                            "name": "ACCESS_TOKEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ACCESS_TOKEN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/constants/token-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/types.ts": [
                {
                    "name": "Constructor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 179
                },
                {
                    "name": "Nullable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "T | null",
                    "file": "src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "Optional",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "T | undefined",
                    "file": "src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "Plain",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "T",
                    "file": "src/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/validators/exists.validator.ts": [
                {
                    "name": "ExistsValidationConstraints",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[, ]",
                    "file": "src/validators/exists.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/decorators/field.decorators.ts": [
                {
                    "name": "RequireField",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/decorators/field.decorators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/validators/unique.validator.ts": [
                {
                    "name": "UniqueValidationConstraints",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[, ]",
                    "file": "src/validators/unique.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/modules/user/dto/user.dto.ts": [
                {
                    "name": "UserDtoOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "src/modules/user/dto/user.dto.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/boilerplate.polyfill.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Array",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/boilerplate.polyfill.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QueryBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/boilerplate.polyfill.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectQueryBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/common/abstract-client.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractClientService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/common/abstract.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractEntity",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/common/abstract.entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAbstractEntity",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/common/dto/abstract.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/common/dto/page-meta.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PageMetaDto",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/common/dto/page-meta.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPageMetaDtoParameters",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/common/dto/page-options.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PageOptionsDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/common/dto/page.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PageDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/common/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateHash",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/common/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getVariableName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/common/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "validateHash",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/constants/language-code.enum.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "supportedLanguageCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/database/migrations/1622299665807-create-users-table.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateUsersTable1622299665807",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/database/migrations/1639940635548-add-user-settings.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddUserSettings1639940635548",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/database/seeds/users.seed.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateUsers",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/decorators/api-page-ok-response.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiPageOkResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/auth-user.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AuthUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INumberFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStringFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "BooleanField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "BooleanFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "DateField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "DateFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "EmailField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "EmailFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "EnumField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "EnumFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "NumberField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "NumberFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PasswordField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PasswordFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PhoneField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PhoneFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "StringField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "StringFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "TmpKeyField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "TmpKeyFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "TranslationsField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "TranslationsFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "URLField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "URLFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "UUIDField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/field.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "UUIDFieldOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/http.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Auth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/http.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "UUIDParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/property.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiBooleanProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/property.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiBooleanPropertyOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/property.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiEnumProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/property.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiEnumPropertyOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/property.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiUUIDProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/property.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiUUIDPropertyOptional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/public-route.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PUBLIC_ROUTE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/public-route.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PublicRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/swagger.schema.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiFile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/swagger.schema.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ApiFileDecorator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/swagger.schema.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "explore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/swagger.schema.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "RegisterModels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/transform.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PhoneNumberSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/transform.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "S3UrlParser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/transform.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ToArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/transform.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ToBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/transform.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ToInt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/transform.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ToLowerCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/transform.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ToUpperCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/transform.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Trim",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/translate.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Translate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/translate.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRANSLATION_DECORATOR_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/use-dto.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "UseDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/validator.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "IsNullable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/validator.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "IsPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/validator.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "IsPhoneNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/validator.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "IsTmpKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/validator.decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "IsUndefinable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/virtual-column.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "VirtualColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/decorators/virtual-column.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VIRTUAL_COLUMN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/entity-subscribers/user-subscriber.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserSubscriber",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/exceptions/file-not-image.exception.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FileNotImageException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/exceptions/page-type.exception.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PageTypeException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/exceptions/user-not-found.exception.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserNotFoundException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/filters/bad-request.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpExceptionFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/filters/constraint-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "constraintErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/filters/query-failed.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QueryFailedFilter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/guards/auth.guard.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/guards/roles.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RolesGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/interceptors/auth-user-interceptor.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthUserInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/interceptors/translation-interceptor.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslationInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/interfaces/IApiFile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IApiFile",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/interfaces/IFile.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFile",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/interfaces/ITranslationDecoratorInterface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITranslationDecoratorInterface",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/middlewares/context.middelware.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "contextMiddleware",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/auth/auth.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "AuthController",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/auth/dto/LoginPayloadDto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginPayloadDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/auth/dto/TokenPayloadDto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TokenPayloadDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/auth/dto/UserLoginDto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserLoginDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/auth/dto/UserRegisterDto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserRegisterDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/modules/auth/jwt.strategy.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JwtStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/auth/public.strategy.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PublicStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/health-checker/health-checker.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "HealthCheckerController",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/modules/health-checker/health-indicators/service.indicator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServiceHealthIndicator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/post/post.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "PostController",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/commands/create-settings.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateSettingsCommand",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/commands/create-settings.command.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateSettingsHandler",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/dto/create-settings.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateSettingsDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/dto/user.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserDto",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/dto/users-page-options.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UsersPageOptionsDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user-settings.entity.ts",
                "type": "entity",
                "linktype": "entity",
                "name": "UserSettingsEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user-settings.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserSettingsEntity",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user-settings.entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserSettingsEntity",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user-settings.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserSettingsRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "UserController",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user.entity.ts",
                "type": "entity",
                "linktype": "entity",
                "name": "UserEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserEntity",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user.entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserEntity",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handlers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/modules/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/providers/context.provider.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContextProvider",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/providers/generator.provider.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GeneratorProvider",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/setup-swagger.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setupSwagger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/services/api-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/shared/services/aws-s3.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AwsS3Service",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/shared/services/generator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GeneratorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/services/translation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/services/validator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidatorService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "providers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/snake-naming.strategy.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SnakeNamingStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/validators/exists.validator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExistsValidator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/validators/exists.validator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IExistsValidationArguments",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/validators/exists.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Exists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/validators/same-as.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SameAs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/validators/unique.validator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UniqueValidator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/validators/unique.validator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUniqueValidationArguments",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/validators/unique.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Unique",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}